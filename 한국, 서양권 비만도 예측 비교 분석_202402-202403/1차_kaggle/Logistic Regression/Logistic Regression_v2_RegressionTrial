{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1C3q-PCBxSadA6s64kONQv1ii6uAD9t9y","authorship_tag":"ABX9TyN/XUcNtMVRO3FhKbaQ52h/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Je8aaf4nBOHK","executionInfo":{"status":"ok","timestamp":1709188370963,"user_tz":-540,"elapsed":19136,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"19674727-e530-46c1-e5f8-2352fa9544a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"s2ey5EjhDhqm","executionInfo":{"status":"ok","timestamp":1709188380653,"user_tz":-540,"elapsed":2375,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["obe_labeled = pd.read_csv('/content/drive/MyDrive/KDT-data-33/Project/Data/ObesityDataSet_Labeled3.csv')\n","obe_labeled"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"-61Jcc1UGjGu","executionInfo":{"status":"ok","timestamp":1709188385804,"user_tz":-540,"elapsed":1029,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"46e1520f-de9a-4a49-aa18-b45c79d6b156"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender        Age    Height      Weight  family_history_with_overweight  \\\n","0          0  21.000000  1.620000   64.000000                               1   \n","1          0  21.000000  1.520000   56.000000                               1   \n","2          1  23.000000  1.800000   77.000000                               1   \n","3          1  27.000000  1.800000   87.000000                               0   \n","4          1  22.000000  1.780000   89.800000                               0   \n","...      ...        ...       ...         ...                             ...   \n","2106       0  20.976842  1.710730  131.408528                               1   \n","2107       0  21.982942  1.748584  133.742943                               1   \n","2108       0  22.524036  1.752206  133.689352                               1   \n","2109       0  24.361936  1.739450  133.346641                               1   \n","2110       0  23.664709  1.738836  133.472641                               1   \n","\n","      FAVC  FCVC  NCP  CAEC  SMOKE      CH2O  SCC       FAF       TUE  CALC  \\\n","0        0   2.0  3.0     1      0  2.000000    0  0.000000  1.000000     0   \n","1        0   3.0  3.0     1      1  3.000000    1  3.000000  0.000000     1   \n","2        0   2.0  3.0     1      0  2.000000    0  2.000000  1.000000     2   \n","3        0   3.0  3.0     1      0  2.000000    0  2.000000  0.000000     2   \n","4        0   2.0  1.0     1      0  2.000000    0  0.000000  0.000000     1   \n","...    ...   ...  ...   ...    ...       ...  ...       ...       ...   ...   \n","2106     1   3.0  3.0     1      0  1.728139    0  1.676269  0.906247     1   \n","2107     1   3.0  3.0     1      0  2.005130    0  1.341390  0.599270     1   \n","2108     1   3.0  3.0     1      0  2.054193    0  1.414209  0.646288     1   \n","2109     1   3.0  3.0     1      0  2.852339    0  1.139107  0.586035     1   \n","2110     1   3.0  3.0     1      0  2.863513    0  1.026452  0.714137     1   \n","\n","      MTRANS  NObeyesdad        BMI  \n","0          2           1  24.386526  \n","1          2           1  24.238227  \n","2          2           1  23.765432  \n","3          3           2  26.851852  \n","4          2           3  28.342381  \n","...      ...         ...        ...  \n","2106       2           6  44.901475  \n","2107       2           6  43.741923  \n","2108       2           6  43.543817  \n","2109       2           6  44.071535  \n","2110       2           6  44.144338  \n","\n","[2111 rows x 18 columns]"],"text/html":["\n","  <div id=\"df-41cfbf43-eeed-434a-a21f-ef279b818db1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>family_history_with_overweight</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>NCP</th>\n","      <th>CAEC</th>\n","      <th>SMOKE</th>\n","      <th>CH2O</th>\n","      <th>SCC</th>\n","      <th>FAF</th>\n","      <th>TUE</th>\n","      <th>CALC</th>\n","      <th>MTRANS</th>\n","      <th>NObeyesdad</th>\n","      <th>BMI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>21.000000</td>\n","      <td>1.620000</td>\n","      <td>64.000000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>24.386526</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>21.000000</td>\n","      <td>1.520000</td>\n","      <td>56.000000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.000000</td>\n","      <td>1</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>24.238227</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>23.000000</td>\n","      <td>1.800000</td>\n","      <td>77.000000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>23.765432</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>27.000000</td>\n","      <td>1.800000</td>\n","      <td>87.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>26.851852</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>22.000000</td>\n","      <td>1.780000</td>\n","      <td>89.800000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>28.342381</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2106</th>\n","      <td>0</td>\n","      <td>20.976842</td>\n","      <td>1.710730</td>\n","      <td>131.408528</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.728139</td>\n","      <td>0</td>\n","      <td>1.676269</td>\n","      <td>0.906247</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>44.901475</td>\n","    </tr>\n","    <tr>\n","      <th>2107</th>\n","      <td>0</td>\n","      <td>21.982942</td>\n","      <td>1.748584</td>\n","      <td>133.742943</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.005130</td>\n","      <td>0</td>\n","      <td>1.341390</td>\n","      <td>0.599270</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>43.741923</td>\n","    </tr>\n","    <tr>\n","      <th>2108</th>\n","      <td>0</td>\n","      <td>22.524036</td>\n","      <td>1.752206</td>\n","      <td>133.689352</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.054193</td>\n","      <td>0</td>\n","      <td>1.414209</td>\n","      <td>0.646288</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>43.543817</td>\n","    </tr>\n","    <tr>\n","      <th>2109</th>\n","      <td>0</td>\n","      <td>24.361936</td>\n","      <td>1.739450</td>\n","      <td>133.346641</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.852339</td>\n","      <td>0</td>\n","      <td>1.139107</td>\n","      <td>0.586035</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>44.071535</td>\n","    </tr>\n","    <tr>\n","      <th>2110</th>\n","      <td>0</td>\n","      <td>23.664709</td>\n","      <td>1.738836</td>\n","      <td>133.472641</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2.863513</td>\n","      <td>0</td>\n","      <td>1.026452</td>\n","      <td>0.714137</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>44.144338</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2111 rows × 18 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41cfbf43-eeed-434a-a21f-ef279b818db1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-41cfbf43-eeed-434a-a21f-ef279b818db1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-41cfbf43-eeed-434a-a21f-ef279b818db1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-da869fa1-02df-4171-ae9f-8c91ff59a51e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da869fa1-02df-4171-ae9f-8c91ff59a51e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-da869fa1-02df-4171-ae9f-8c91ff59a51e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_aa2db867-dd89-4c5e-9a86-a944465e30fc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('obe_labeled')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_aa2db867-dd89-4c5e-9a86-a944465e30fc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('obe_labeled');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"obe_labeled","summary":"{\n  \"name\": \"obe_labeled\",\n  \"rows\": 2111,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.345968273732234,\n        \"min\": 14.0,\n        \"max\": 61.0,\n        \"num_unique_values\": 1402,\n        \"samples\": [\n          25.526746,\n          26.740655\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09330481986792007,\n        \"min\": 1.45,\n        \"max\": 1.98,\n        \"num_unique_values\": 1574,\n        \"samples\": [\n          1.760175,\n          1.688436\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.1911717452047,\n        \"min\": 39.0,\n        \"max\": 173.0,\n        \"num_unique_values\": 1525,\n        \"samples\": [\n          120.702935,\n          64.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_history_with_overweight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5339265785033002,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 810,\n        \"samples\": [\n          2.987148,\n          2.939727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7780386488418612,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 635,\n        \"samples\": [\n          1.468948,\n          2.9948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CAEC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6129534517968722,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 1268,\n        \"samples\": [\n          2.395387,\n          1.983973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.850592430836698,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 1190,\n        \"samples\": [\n          1.655488,\n          2.433918\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6089272596763782,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 1129,\n        \"samples\": [\n          1.416353,\n          0.878258\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MTRANS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NObeyesdad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.011336612534134,\n        \"min\": 12.998684889724604,\n        \"max\": 50.81175280566433,\n        \"num_unique_values\": 1968,\n        \"samples\": [\n          27.955900433111218,\n          35.87312307892319\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(\n","    obe_labeled.drop('NObeyesdad', axis=1),\n","    obe_labeled['NObeyesdad'], # Feature와 Label의 N을 맞추는 과정\n","    random_state=42, # 랜덤하게 자르는데 random_state를 1로 줄 경우 항상 같은 랜덤으로 고정\n","    stratify=obe_labeled['NObeyesdad'] # 클래스의 비율만큼 분할 수행\n",")\n","\n","sns.countplot(x=y_train)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"IojMrJouEljM","executionInfo":{"status":"ok","timestamp":1709188408155,"user_tz":-540,"elapsed":1890,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"7b913677-8ae1-47c4-8854-db566bb95826"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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5nKfAW7KsiylpqZq7dq12rJli9q1a2f3SG6ttrZWlZWVdo9hu0GDBungwYPav3+/c+nbt6+SkpK0f/9+eXp62j2i27hy5YpOnjypsLAwu0ex3YMPPnjDr7b44x//qMjISJsm+nH4GMuNpKWlKTk5WX379lX//v21YMECVVRU6JlnnrF7NFtduXLF5f+sCgsLtX//fgUFBalt27Y2TmavlJQUZWdna/369fL393fe2xUYGChfX1+bp7NXenq6EhMT1bZtW12+fFnZ2dnatm2bvvjiC7tHs52/v/8N93U1adJELVq0+Mnf7zV9+nQNGzZMkZGROnv2rDIyMuTp6anRo0fbPZrtXnzxRf3TP/2T5s6dq5EjR2r37t1aunSpli5davdot8bur4PB1aJFi6y2bdtaXl5eVv/+/a2dO3faPZLttm7dakm6YUlOTrZ7NFvd7JxIslasWGH3aLYbN26cFRkZaXl5eVmtWrWyBg0aZG3atMnusdwWXz3/uyeffNIKCwuzvLy8rNatW1tPPvmkdeLECbvHchsbNmywevbsaXl7e1tdu3a1li5davdIt8xhWZZlU2cBAADccdyzAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQPALcyePVu9e/e2e4wfbdu2bXI4HCotLb2t4wwcOFBTp05tkJkAuCJ2ANTL008/LYfDoddff91l/bp16+RwOJyPa2pq9PbbbysqKko+Pj5q3ry5EhMTtWPHjrs9MoCfKGIHQL35+Pho3rx5unTp0k23W5alUaNGac6cOXrhhRd09OhRbdu2TRERERo4cKDWrVt3dwcG8JNE7ACot/j4eIWGhiozM/Om29esWaOPPvpI77//viZMmKB27dopOjpaS5cu1b/8y79owoQJqqiocHnOu+++q4iICPn5+WnkyJEqKytz2f7b3/5W3bp1k4+Pj7p27ap33nnHuS0uLk6pqaku+58/f15eXl7Kzc2VJFVWVmr69Olq3bq1mjRpopiYGG3bts25/1/+8hcNGzZMzZs3V5MmTdSjRw999tlnzu2fffaZOnfuLF9fXz3yyCP685//7PJ6Fy5c0OjRo9W6dWv5+fkpKipKv//97132qaio0NixY9W0aVOFhYVp/vz533+iAdwWYgdAvXl6emru3LlatGiRzpw5c8P2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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Logistic Regression"],"metadata":{"id":"NuW-aaNn3CAc"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","logi_reg = LogisticRegression(max_iter=100000)\n","logi_reg.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"f6XzCPMatAkt","executionInfo":{"status":"ok","timestamp":1709188439931,"user_tz":-540,"elapsed":10626,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"3b2ff8c7-75ab-46e6-ded1-9ae3be3dc285"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of f AND g EVALUATIONS EXCEEDS LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(max_iter=100000)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=100000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=100000)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report\n","\n","logi_reg_pred_train = logi_reg.predict(X_train)\n","logi_reg_pred_test = logi_reg.predict(X_test)\n","\n","confusion_m_train = confusion_matrix(y_train, logi_reg_pred_train)\n","confusion_m_test = confusion_matrix(y_test, logi_reg_pred_test)\n","report_train = classification_report(y_train, logi_reg_pred_train, digits=6)\n","report_test = classification_report(y_test, logi_reg_pred_test, digits=6)\n","\n","print(f'Train 오차행렬\\n{confusion_m_train}')\n","print()\n","print(f'Test 오차행렬\\n{confusion_m_test}')\n","print()\n","print()\n","print(f'Train 성능 평가\\n{report_train}')\n","print(f'Test 성능 평가\\n{report_test}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCpweoyauRrR","executionInfo":{"status":"ok","timestamp":1709188629778,"user_tz":-540,"elapsed":719,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"6891be11-fa3b-42fd-970e-02b220c49d33"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Train 오차행렬\n","[[202   2   0   0   0   0   0]\n"," [  7 203   5   0   0   0   0]\n"," [  0   2 207   8   0   0   0]\n"," [  0   0  15 203   0   0   0]\n"," [  0   0   0   1 259   3   0]\n"," [  0   0   0   0   1 222   0]\n"," [  0   0   0   0   0   0 243]]\n","\n","Test 오차행렬\n","[[68  0  0  0  0  0  0]\n"," [ 2 66  4  0  0  0  0]\n"," [ 0  1 67  5  0  0  0]\n"," [ 0  0  2 67  3  0  0]\n"," [ 0  0  0  1 87  0  0]\n"," [ 0  0  0  0  1 72  1]\n"," [ 0  0  0  0  0  1 80]]\n","\n","\n","Train 성능 평가\n","              precision    recall  f1-score   support\n","\n","           0   0.966507  0.990196  0.978208       204\n","           1   0.980676  0.944186  0.962085       215\n","           2   0.911894  0.953917  0.932432       217\n","           3   0.957547  0.931193  0.944186       218\n","           4   0.996154  0.984791  0.990440       263\n","           5   0.986667  0.995516  0.991071       223\n","           6   1.000000  1.000000  1.000000       243\n","\n","    accuracy                       0.972205      1583\n","   macro avg   0.971349  0.971400  0.971203      1583\n","weighted avg   0.972618  0.972205  0.972248      1583\n","\n","Test 성능 평가\n","              precision    recall  f1-score   support\n","\n","           0   0.971429  1.000000  0.985507        68\n","           1   0.985075  0.916667  0.949640        72\n","           2   0.917808  0.917808  0.917808        73\n","           3   0.917808  0.930556  0.924138        72\n","           4   0.956044  0.988636  0.972067        88\n","           5   0.986301  0.972973  0.979592        74\n","           6   0.987654  0.987654  0.987654        81\n","\n","    accuracy                       0.960227       528\n","   macro avg   0.960303  0.959185  0.959487       528\n","weighted avg   0.960574  0.960227  0.960148       528\n","\n"]}]},{"cell_type":"markdown","source":["BMI가 변수로 들어가버림. 다시 합시다."],"metadata":{"id":"O0b8B684WTzY"}},{"cell_type":"markdown","source":["# Linear Regression"],"metadata":{"id":"94XPPApgrVyw"}},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","\n","lin_reg = LinearRegression()\n","lin_reg.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"LWqiILL0nRCE","executionInfo":{"status":"ok","timestamp":1709189130489,"user_tz":-540,"elapsed":325,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"f8a17503-0873-4e62-afd5-4e36bc4da5d1"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","lin_reg_pred_train = lin_reg.predict(X_train)\n","lin_reg_pred_train_rnd = lin_reg_pred_train.round(0).astype('int64')\n","lin_reg_pred_train_rnd[lin_reg_pred_train_rnd<0] = 0\n","lin_reg_pred_train_rnd[lin_reg_pred_train_rnd>6] = 6\n","lin_reg_pred_test = lin_reg.predict(X_test)\n","lin_reg_pred_test_rnd = lin_reg_pred_test.round(0).astype('int64')\n","lin_reg_pred_test_rnd[lin_reg_pred_test_rnd<0] = 0\n","lin_reg_pred_test_rnd[lin_reg_pred_test_rnd>6] = 6\n","\n","mse_train = mean_squared_error(y_train, lin_reg_pred_train)\n","rmse_train = np.sqrt(mse_train)\n","r2_train = r2_score(y_train, lin_reg_pred_train)\n","mse_test = mean_squared_error(y_test, lin_reg_pred_test)\n","rmse_test = np.sqrt(mse_test)\n","r2_test = r2_score(y_test, lin_reg_pred_test)\n","\n","mse_train_rnd = mean_squared_error(y_train, lin_reg_pred_train_rnd)\n","rmse_train_rnd = np.sqrt(mse_train_rnd)\n","r2_train_rnd = r2_score(y_train, lin_reg_pred_train_rnd)\n","mse_test_rnd = mean_squared_error(y_test, lin_reg_pred_test_rnd)\n","rmse_test_rnd = np.sqrt(mse_test_rnd)\n","r2_test_rnd = r2_score(y_test, lin_reg_pred_test_rnd)\n","\n","confusion_m_train = confusion_matrix(y_train, lin_reg_pred_train_rnd)\n","confusion_m_test = confusion_matrix(y_test, lin_reg_pred_test_rnd)\n","report_train = classification_report(y_train, lin_reg_pred_train_rnd, digits=6)\n","report_test = classification_report(y_test, lin_reg_pred_test_rnd, digits=6)\n","\n","print(f'Train MSE : {mse_train:.6f}  |  Train MSE (Round) : {mse_train_rnd:.6f}')\n","print(f'Train RMSE: {rmse_train:.6f}  |  Train RMSE (Round): {rmse_train_rnd:.6f}')\n","print(f'Train R^2 : {r2_train:.6f}  |  Train R^2 (Round) : {r2_train_rnd:.6f}')\n","print(f'Test MSE  : {mse_test:.6f}  |  Test MSE (Round)  : {mse_test_rnd:.6f}')\n","print(f'Test RMSE : {rmse_test:.6f}  |  Test RMSE (Round) : {rmse_test_rnd:.6f}')\n","print(f'Test R^2  : {r2_test:.6f}  |  Test R^2 (Round)  : {r2_test_rnd:.6f}')\n","print()\n","print()\n","print(f'Train 오차행렬\\n{confusion_m_train}')\n","print()\n","print(f'Test 오차행렬\\n{confusion_m_test}')\n","print()\n","print()\n","print(f'Train 성능 평가\\n{report_train}')\n","print(f'Test 성능 평가\\n{report_test}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QUoT4dc6nqy9","executionInfo":{"status":"ok","timestamp":1709190178304,"user_tz":-540,"elapsed":405,"user":{"displayName":"Ik Tae Kwon","userId":"16323851773370951409"}},"outputId":"9175f841-5b4d-455e-ad38-56c8af2da9f5"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Train MSE : 0.149363  |  Train MSE (Round) : 0.137713\n","Train RMSE: 0.386476  |  Train RMSE (Round): 0.371097\n","Train R^2 : 0.962077  |  Train R^2 (Round) : 0.965035\n","Test MSE  : 0.154817  |  Test MSE (Round)  : 0.149621\n","Test RMSE : 0.393468  |  Test RMSE (Round) : 0.386809\n","Test R^2  : 0.960693  |  Test R^2 (Round)  : 0.962012\n","\n","\n","Train 오차행렬\n","[[202   2   0   0   0   0   0]\n"," [ 19 133  63   0   0   0   0]\n"," [  0   1 199  17   0   0   0]\n"," [  0   0  16 200   2   0   0]\n"," [  0   0   0  38 223   2   0]\n"," [  0   0   0   0  27 191   5]\n"," [  0   0   0   0   0  26 217]]\n","\n","Test 오차행렬\n","[[68  0  0  0  0  0  0]\n"," [ 6 36 30  0  0  0  0]\n"," [ 0  0 67  6  0  0  0]\n"," [ 0  0  3 69  0  0  0]\n"," [ 0  0  0 18 70  0  0]\n"," [ 0  0  0  0  8 65  1]\n"," [ 0  0  0  0  0  7 74]]\n","\n","\n","Train 성능 평가\n","              precision    recall  f1-score   support\n","\n","           0   0.914027  0.990196  0.950588       204\n","           1   0.977941  0.618605  0.757835       215\n","           2   0.715827  0.917051  0.804040       217\n","           3   0.784314  0.917431  0.845666       218\n","           4   0.884921  0.847909  0.866019       263\n","           5   0.872146  0.856502  0.864253       223\n","           6   0.977477  0.893004  0.933333       243\n","\n","    accuracy                       0.862287      1583\n","   macro avg   0.875236  0.862957  0.860248      1583\n","weighted avg   0.876679  0.862287  0.861009      1583\n","\n","Test 성능 평가\n","              precision    recall  f1-score   support\n","\n","           0   0.918919  1.000000  0.957746        68\n","           1   1.000000  0.500000  0.666667        72\n","           2   0.670000  0.917808  0.774566        73\n","           3   0.741935  0.958333  0.836364        72\n","           4   0.897436  0.795455  0.843373        88\n","           5   0.902778  0.878378  0.890411        74\n","           6   0.986667  0.913580  0.948718        81\n","\n","    accuracy                       0.850379       528\n","   macro avg   0.873962  0.851936  0.845407       528\n","weighted avg   0.875977  0.850379  0.846291       528\n","\n"]}]},{"cell_type":"markdown","source":["결론: 쓸데없는 짓. 왜 categorical에 linear regression요?"],"metadata":{"id":"bHS07VAOWYm0"}}]}