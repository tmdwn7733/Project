{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1RvHzpxC8LUMTwFK81QVr7rR97vJ3VVJn","timestamp":1709185384743}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import time\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from sklearn.metrics import accuracy_score, r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import make_regression\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","import warnings\n","warnings.filterwarnings('ignore')\n","#기계학습 모델 생성, 학습, 평가\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, recall_score,precision_score,mean_squared_error,mean_absolute_error,r2_score\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import plot_tree # 의사결정나무 규칙 시각화용\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import KFold\n","import sklearn.datasets as d\n","from tqdm import tqdm # 오 이거 신기하다.\n","# 시각화\n","import matplotlib.pyplot as plt\n","from matplotlib.colors import ListedColormap\n","import matplotlib.patches as mpatches\n","import matplotlib\n","matplotlib.rcParams['axes.unicode_minus'] = False\n","# 한글폰트 지원\n","from sklearn.datasets import load_iris, load_wine, load_breast_cancer\n","from sklearn.datasets import load_diabetes\n","from sklearn.model_selection import train_test_split, cross_validate\n","from sklearn.metrics import accuracy_score, precision_score, recall_score\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn import datasets\n","import xgboost as xgb\n","from xgboost import XGBClassifier, XGBRegressor\n","from xgboost import plot_importance, plot_importance\n","\n","import graphviz\n","\n","plt.style.use(['seaborn-whitegrid'])"],"metadata":{"id":"z3RNaikKUCoX","executionInfo":{"status":"ok","timestamp":1709910773015,"user_tz":-540,"elapsed":2435,"user":{"displayName":"최수민","userId":"09574653049761404940"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"AIGMNGaoTaMS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709910873308,"user_tz":-540,"elapsed":18127,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"75596e17-b355-44d0-c4ff-ba52316caaca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["k_obe = pd.read_csv(\"/content/drive/MyDrive/멀티캠퍼스_머신러닝/K_Obestiy_240227_AddedObe.csv의 사본\")\n"],"metadata":{"id":"CkodW3DZUNJq","executionInfo":{"status":"ok","timestamp":1709910891022,"user_tz":-540,"elapsed":510,"user":{"displayName":"최수민","userId":"09574653049761404940"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["k_obe.info()"],"metadata":{"id":"P9E5Fly3Q0ti","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709910893090,"user_tz":-540,"elapsed":601,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"075d948a-a844-4d95-daf2-0bb351db2132"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3950 entries, 0 to 3949\n","Data columns (total 17 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Gender      3950 non-null   int64  \n"," 1   Age         3950 non-null   int64  \n"," 2   CALC        3950 non-null   int64  \n"," 3   SMOKE       3950 non-null   int64  \n"," 4   FAF_Time    3950 non-null   float64\n"," 5   FAF_Day     3950 non-null   float64\n"," 6   Height      3950 non-null   float64\n"," 7   Weight      3950 non-null   float64\n"," 8   TUE         3950 non-null   int64  \n"," 9   NCP         3950 non-null   float64\n"," 10  FAVC        3950 non-null   int64  \n"," 11  FCVC        3950 non-null   float64\n"," 12  SCC         3950 non-null   int64  \n"," 13  CH2O        3950 non-null   float64\n"," 14  NObeyesdad  3950 non-null   int64  \n"," 15  BMI         3950 non-null   object \n"," 16  HE_BMI_pct  3950 non-null   object \n","dtypes: float64(7), int64(8), object(2)\n","memory usage: 524.7+ KB\n"]}]},{"cell_type":"code","source":["# 물섭취 이상치 제거.\n","kobe = k_obe[k_obe['CH2O'] <= 11.85]\n","kobe.info()"],"metadata":{"id":"cpLEdOfB1JeN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709910896146,"user_tz":-540,"elapsed":3,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"2d0f5ad9-7d1c-4347-9a1b-0280fdc66eca"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 3835 entries, 0 to 3949\n","Data columns (total 17 columns):\n"," #   Column      Non-Null Count  Dtype  \n","---  ------      --------------  -----  \n"," 0   Gender      3835 non-null   int64  \n"," 1   Age         3835 non-null   int64  \n"," 2   CALC        3835 non-null   int64  \n"," 3   SMOKE       3835 non-null   int64  \n"," 4   FAF_Time    3835 non-null   float64\n"," 5   FAF_Day     3835 non-null   float64\n"," 6   Height      3835 non-null   float64\n"," 7   Weight      3835 non-null   float64\n"," 8   TUE         3835 non-null   int64  \n"," 9   NCP         3835 non-null   float64\n"," 10  FAVC        3835 non-null   int64  \n"," 11  FCVC        3835 non-null   float64\n"," 12  SCC         3835 non-null   int64  \n"," 13  CH2O        3835 non-null   float64\n"," 14  NObeyesdad  3835 non-null   int64  \n"," 15  BMI         3835 non-null   object \n"," 16  HE_BMI_pct  3835 non-null   object \n","dtypes: float64(7), int64(8), object(2)\n","memory usage: 539.3+ KB\n"]}]},{"cell_type":"code","source":["# 스케일링 진행\n","\n","# 스케일링\n","std_scaler = StandardScaler()\n","mm_scaler = MinMaxScaler()\n","Added_kobe_Scaled = kobe.copy()  # 새로운 DataFrame을 만들어 변경사항을 적용.\n","cont_vars = ['Age', 'Height', 'Weight', 'CH2O']  # standard\n","ordinal_vars = ['FCVC', 'NCP', 'TUE', 'CALC', 'FAF_Day']  # min-max\n","Added_kobe_Scaled.loc[:, cont_vars] = std_scaler.fit_transform(Added_kobe_Scaled[cont_vars])  # .loc을 사용하여 값 할당\n","Added_kobe_Scaled.loc[:, ordinal_vars] = mm_scaler.fit_transform(Added_kobe_Scaled[ordinal_vars])  # .loc을 사용하여 값 할당\n","# FAF-Day 열 이름을 FAF로 변경\n","# Added_kobe_Scaled = Added_kobe_Scaled.rename(columns={'FAF_Day': 'FAF'})\n","\n","# 결과 확인\n","Added_kobe_Scaled.describe()"],"metadata":{"id":"5YvP93huSR6X","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1709910903723,"user_tz":-540,"elapsed":414,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"d74f86ae-8616-476e-dd5b-c366d8f814dd"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Gender           Age         CALC        SMOKE     FAF_Time  \\\n","count  3835.000000  3.835000e+03  3835.000000  3835.000000  3835.000000   \n","mean      0.438331  1.926896e-16     0.317862     0.197132     0.235359   \n","std       0.496247  1.000130e+00     0.263825     0.397884     0.782601   \n","min       0.000000 -1.965351e+00     0.000000     0.000000     0.000000   \n","25%       0.000000 -8.394883e-01     0.000000     0.000000     0.000000   \n","50%       0.000000  1.539200e-01     0.333333     0.000000     0.000000   \n","75%       1.000000  8.824194e-01     0.333333     0.000000     0.237481   \n","max       1.000000  1.478464e+00     1.000000     1.000000     7.000000   \n","\n","           FAF_Day        Height        Weight          TUE          NCP  \\\n","count  3835.000000  3.835000e+03  3.835000e+03  3835.000000  3835.000000   \n","mean      0.183957 -1.667506e-15  1.778673e-16     0.653368     0.819880   \n","std       0.278798  1.000130e+00  1.000130e+00     0.384859     0.169895   \n","min       0.000000 -3.173295e+00 -2.475725e+00     0.000000     0.000000   \n","25%       0.000000 -7.507342e-01 -7.577129e-01     0.333333     0.696970   \n","50%       0.000000 -9.415246e-02 -1.441373e-01     0.666667     0.818433   \n","75%       0.428571  7.435553e-01  6.246368e-01     1.000000     1.000000   \n","max       1.000000  3.369882e+00  5.291421e+00     1.000000     1.000000   \n","\n","              FAVC         FCVC          SCC          CH2O   NObeyesdad  \n","count  3835.000000  3835.000000  3835.000000  3.835000e+03  3835.000000  \n","mean      0.754107     0.993220     0.107953 -2.482731e-16     2.908475  \n","std       0.430672     0.048424     0.310362  1.000130e+00     1.086129  \n","min       0.000000     0.000000     0.000000 -2.203325e+00     1.000000  \n","25%       1.000000     1.000000     0.000000 -6.783923e-01     2.000000  \n","50%       1.000000     1.000000     0.000000 -2.484982e-02     3.000000  \n","75%       1.000000     1.000000     0.000000  1.929977e-01     4.000000  \n","max       1.000000     1.000000     1.000000  2.894307e+00     6.000000  "],"text/html":["\n","  <div id=\"df-0cf0f54f-bd02-45a0-83fb-ee559e1c5932\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>CALC</th>\n","      <th>SMOKE</th>\n","      <th>FAF_Time</th>\n","      <th>FAF_Day</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>TUE</th>\n","      <th>NCP</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>SCC</th>\n","      <th>CH2O</th>\n","      <th>NObeyesdad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3835.000000</td>\n","      <td>3.835000e+03</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3.835000e+03</td>\n","      <td>3.835000e+03</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3835.000000</td>\n","      <td>3.835000e+03</td>\n","      <td>3835.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.438331</td>\n","      <td>1.926896e-16</td>\n","      <td>0.317862</td>\n","      <td>0.197132</td>\n","      <td>0.235359</td>\n","      <td>0.183957</td>\n","      <td>-1.667506e-15</td>\n","      <td>1.778673e-16</td>\n","      <td>0.653368</td>\n","      <td>0.819880</td>\n","      <td>0.754107</td>\n","      <td>0.993220</td>\n","      <td>0.107953</td>\n","      <td>-2.482731e-16</td>\n","      <td>2.908475</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.496247</td>\n","      <td>1.000130e+00</td>\n","      <td>0.263825</td>\n","      <td>0.397884</td>\n","      <td>0.782601</td>\n","      <td>0.278798</td>\n","      <td>1.000130e+00</td>\n","      <td>1.000130e+00</td>\n","      <td>0.384859</td>\n","      <td>0.169895</td>\n","      <td>0.430672</td>\n","      <td>0.048424</td>\n","      <td>0.310362</td>\n","      <td>1.000130e+00</td>\n","      <td>1.086129</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>-1.965351e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-3.173295e+00</td>\n","      <td>-2.475725e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-2.203325e+00</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>-8.394883e-01</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-7.507342e-01</td>\n","      <td>-7.577129e-01</td>\n","      <td>0.333333</td>\n","      <td>0.696970</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>-6.783923e-01</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>1.539200e-01</td>\n","      <td>0.333333</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-9.415246e-02</td>\n","      <td>-1.441373e-01</td>\n","      <td>0.666667</td>\n","      <td>0.818433</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>-2.484982e-02</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>8.824194e-01</td>\n","      <td>0.333333</td>\n","      <td>0.000000</td>\n","      <td>0.237481</td>\n","      <td>0.428571</td>\n","      <td>7.435553e-01</td>\n","      <td>6.246368e-01</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.929977e-01</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>1.478464e+00</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>7.000000</td>\n","      <td>1.000000</td>\n","      <td>3.369882e+00</td>\n","      <td>5.291421e+00</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.894307e+00</td>\n","      <td>6.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cf0f54f-bd02-45a0-83fb-ee559e1c5932')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0cf0f54f-bd02-45a0-83fb-ee559e1c5932 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0cf0f54f-bd02-45a0-83fb-ee559e1c5932');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-87d0eabb-490b-4482-b8c5-d8fc6810f642\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-87d0eabb-490b-4482-b8c5-d8fc6810f642')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-87d0eabb-490b-4482-b8c5-d8fc6810f642 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"Added_kobe_Scaled\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.7290979940824,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.43833116036505865,\n          1.0,\n          0.4962470839640379\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.841834660115,\n        \"min\": -1.9653510157870109,\n        \"max\": 3835.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.9268955546036615e-16,\n          0.15392000143848492,\n          3835.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.7637292756651,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3835.0,\n          0.31786179921773144,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.7967363675452,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1971316818774446,\n          1.0,\n          0.3978844841513567\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.4623974415415,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3835.0,\n          0.23535877717611714,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF_Day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.7817678173867,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3835.0,\n          0.18395743282566962,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.8231592637205,\n        \"min\": -3.173294555998156,\n        \"max\": 3835.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.6675057684070148e-15,\n          -0.09415246206393216,\n          3835.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.7003344734203,\n        \"min\": -2.475724626987788,\n        \"max\": 3835.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.778672819634149e-16,\n          -0.14413732809659438,\n          3835.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.6733338766544,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3835.0,\n          0.653368100825728,\n          0.6666666666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.6497575281808,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3835.0,\n          0.819879847294073,\n          0.8184330253719231\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.6154302171694,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7541069100391135,\n          1.0,\n          0.4306716183110943\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.6226829532804,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9932203389830508,\n          1.0,\n          0.048424299160091715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.8056604496373,\n        \"min\": 0.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.10795306388526728,\n          1.0,\n          0.31036159080216874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1355.818375620861,\n        \"min\": -2.2033246898282086,\n        \"max\": 3835.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -2.482730810739333e-16,\n          -0.024849820262174603,\n          3835.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NObeyesdad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1354.8683497015618,\n        \"min\": 1.0,\n        \"max\": 3835.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.9084745762711863,\n          3.0,\n          3835.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["k_obe.describe()"],"metadata":{"id":"1jo2NALR_L4M","colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1709788070193,"user_tz":-540,"elapsed":8,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"3182fb6b-7673-44fd-9591-57cc75531524"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Gender          Age         CALC        SMOKE     FAF_Time  \\\n","count  3950.000000  3950.000000  3950.000000  3950.000000  3950.000000   \n","mean      0.443291    41.683038     0.959241     0.199747     0.237516   \n","std       0.496837    15.072738     0.796364     0.399861     0.786017   \n","min       0.000000    12.000000     0.000000     0.000000     0.000000   \n","25%       0.000000    29.000000     0.000000     0.000000     0.000000   \n","50%       0.000000    44.000000     1.000000     0.000000     0.000000   \n","75%       1.000000    55.000000     1.000000     0.000000     0.237481   \n","max       1.000000    64.000000     3.000000     1.000000     7.000000   \n","\n","           FAF_Day       Height       Weight          TUE          NCP  \\\n","count  3950.000000  3950.000000  3950.000000  3950.000000  3950.000000   \n","mean      1.310276     1.653096    65.541772     2.958734     2.143687   \n","std       1.970859     0.088717    13.907620     1.155680     0.404437   \n","min       0.000000     1.372000    31.100000     1.000000     0.214286   \n","25%       0.000000     1.587000    55.000000     2.000000     1.857143   \n","50%       0.000000     1.645000    63.600000     3.000000     2.143449   \n","75%       3.000000     1.720000    74.200000     4.000000     2.571429   \n","max       7.000000     1.950000   138.700000     4.000000     2.571429   \n","\n","              FAVC         FCVC          SCC         CH2O   NObeyesdad  \n","count  3950.000000  3950.000000  3950.000000  3950.000000  3950.000000  \n","mean      0.747848     2.979494     0.109367     5.369704     2.916962  \n","std       0.434303     0.145707     0.312139     2.959596     1.086854  \n","min       0.000000     0.000000     0.000000     0.000000     1.000000  \n","25%       0.000000     3.000000     0.000000     3.500000     2.000000  \n","50%       1.000000     3.000000     0.000000     5.000000     3.000000  \n","75%       1.000000     3.000000     0.000000     6.000000     4.000000  \n","max       1.000000     3.000000     1.000000    30.000000     6.000000  "],"text/html":["\n","  <div id=\"df-950dacdf-b752-472d-afcd-f8e304bbe024\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>CALC</th>\n","      <th>SMOKE</th>\n","      <th>FAF_Time</th>\n","      <th>FAF_Day</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>TUE</th>\n","      <th>NCP</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>SCC</th>\n","      <th>CH2O</th>\n","      <th>NObeyesdad</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","      <td>3950.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.443291</td>\n","      <td>41.683038</td>\n","      <td>0.959241</td>\n","      <td>0.199747</td>\n","      <td>0.237516</td>\n","      <td>1.310276</td>\n","      <td>1.653096</td>\n","      <td>65.541772</td>\n","      <td>2.958734</td>\n","      <td>2.143687</td>\n","      <td>0.747848</td>\n","      <td>2.979494</td>\n","      <td>0.109367</td>\n","      <td>5.369704</td>\n","      <td>2.916962</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.496837</td>\n","      <td>15.072738</td>\n","      <td>0.796364</td>\n","      <td>0.399861</td>\n","      <td>0.786017</td>\n","      <td>1.970859</td>\n","      <td>0.088717</td>\n","      <td>13.907620</td>\n","      <td>1.155680</td>\n","      <td>0.404437</td>\n","      <td>0.434303</td>\n","      <td>0.145707</td>\n","      <td>0.312139</td>\n","      <td>2.959596</td>\n","      <td>1.086854</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>12.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.372000</td>\n","      <td>31.100000</td>\n","      <td>1.000000</td>\n","      <td>0.214286</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>29.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.587000</td>\n","      <td>55.000000</td>\n","      <td>2.000000</td>\n","      <td>1.857143</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>3.500000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>44.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.645000</td>\n","      <td>63.600000</td>\n","      <td>3.000000</td>\n","      <td>2.143449</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>5.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>55.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.237481</td>\n","      <td>3.000000</td>\n","      <td>1.720000</td>\n","      <td>74.200000</td>\n","      <td>4.000000</td>\n","      <td>2.571429</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>64.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>7.000000</td>\n","      <td>7.000000</td>\n","      <td>1.950000</td>\n","      <td>138.700000</td>\n","      <td>4.000000</td>\n","      <td>2.571429</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>30.000000</td>\n","      <td>6.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-950dacdf-b752-472d-afcd-f8e304bbe024')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-950dacdf-b752-472d-afcd-f8e304bbe024 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-950dacdf-b752-472d-afcd-f8e304bbe024');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9ceec699-f652-48cd-abe2-f1fbcc34be92\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ceec699-f652-48cd-abe2-f1fbcc34be92')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9ceec699-f652-48cd-abe2-f1fbcc34be92 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"k_obe\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.387455782976,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.44329113924050634,\n          1.0,\n          0.49683659076295966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1383.484144030108,\n        \"min\": 12.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.68303797468354,\n          44.0,\n          3950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.1949920222978,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3950.0,\n          0.959240506329114,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.4551431383193,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.19974683544303798,\n          1.0,\n          0.3998606198147846\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF_Time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.120694197479,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3950.0,\n          0.23751579877451437,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF_Day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1395.8670593606844,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3950.0,\n          1.3102755716750543,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.0301344388317,\n        \"min\": 0.08871704492929437,\n        \"max\": 3950.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.6530956962025316,\n          1.645,\n          3950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1374.695156514471,\n        \"min\": 13.907619525999177,\n        \"max\": 3950.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          65.54177215189874,\n          63.6,\n          3950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1395.6214483042015,\n        \"min\": 1.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3950.0,\n          2.95873417721519,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1395.934854081064,\n        \"min\": 0.214285714285714,\n        \"max\": 3950.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3950.0,\n          2.1436870537848343,\n          2.14344927409096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.324726222063,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7478481012658228,\n          1.0,\n          0.4343029707039883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1395.7725800641022,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.9794936708860758,\n          3.0,\n          0.14570667410988813\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1396.4641379364818,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.10936708860759493,\n          1.0,\n          0.31213874240534\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1393.8989788419142,\n        \"min\": 0.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.3697035063933924,\n          5.0,\n          3950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NObeyesdad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1395.5264957513052,\n        \"min\": 1.0,\n        \"max\": 3950.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.916962025316456,\n          3.0,\n          3950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# xgboost용 데이터 분할\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    Added_kobe_Scaled.drop(['FAF_Time',\"BMI\",\"HE_BMI_pct\",\"NObeyesdad\"], axis=1),\n","    Added_kobe_Scaled['NObeyesdad'],\n","    random_state=42,\n","    stratify=Added_kobe_Scaled['NObeyesdad']\n",")\n","# 훈련 데이터를 훈련 세트와 검증 세트로 나눔\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n","# XGBoost 모델에 필요한 형식으로 데이터 변환\n","dtr = xgb.DMatrix(data=X_train, label=y_train)\n","dtest = xgb.DMatrix(data=X_test, label=y_test)\n","dval = xgb.DMatrix(data=X_val, label=y_val)\n","X_train.shape, X_val.shape, X_test.shape"],"metadata":{"id":"9ST2dfysNj4n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709910906357,"user_tz":-540,"elapsed":4,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"7428e8de-7e66-46a4-cd39-f0dced05f1ce"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2300, 13), (576, 13), (959, 13))"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["X_train.head(5)"],"metadata":{"id":"TpQNgow2eMHt","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1709910908653,"user_tz":-540,"elapsed":633,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"87eec67b-b5f3-41a3-ee55-1e9657ddba41"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender       Age      CALC  SMOKE   FAF_Day    Height    Weight  \\\n","1036       0  0.749965  0.000000      0  0.000000 -1.067705 -0.071952   \n","3218       0  0.749965  1.000000      0  1.000000 -1.814850 -1.306322   \n","2384       1  0.153920  0.666667      0  0.714286  1.785030  1.191292   \n","3886       1  1.279783  0.000000      0  0.000000  0.426585  1.119107   \n","2497       1 -0.839488  0.333333      0  0.714286  1.818991  1.602749   \n","\n","           TUE       NCP  FAVC  FCVC  SCC      CH2O  \n","1036  0.000000  1.000000     0   1.0    0  2.153625  \n","3218  0.333333  0.636364     0   1.0    0  2.153625  \n","2384  1.000000  1.000000     0   1.0    0  2.153625  \n","3886  1.000000  0.727273     0   1.0    1 -1.549782  \n","2497  1.000000  0.636364     1   1.0    0 -0.896240  "],"text/html":["\n","  <div id=\"df-59423c5d-b001-4465-90a7-290e58ba21d2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>CALC</th>\n","      <th>SMOKE</th>\n","      <th>FAF_Day</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>TUE</th>\n","      <th>NCP</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>SCC</th>\n","      <th>CH2O</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1036</th>\n","      <td>0</td>\n","      <td>0.749965</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>-1.067705</td>\n","      <td>-0.071952</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>2.153625</td>\n","    </tr>\n","    <tr>\n","      <th>3218</th>\n","      <td>0</td>\n","      <td>0.749965</td>\n","      <td>1.000000</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>-1.814850</td>\n","      <td>-1.306322</td>\n","      <td>0.333333</td>\n","      <td>0.636364</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>2.153625</td>\n","    </tr>\n","    <tr>\n","      <th>2384</th>\n","      <td>1</td>\n","      <td>0.153920</td>\n","      <td>0.666667</td>\n","      <td>0</td>\n","      <td>0.714286</td>\n","      <td>1.785030</td>\n","      <td>1.191292</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>2.153625</td>\n","    </tr>\n","    <tr>\n","      <th>3886</th>\n","      <td>1</td>\n","      <td>1.279783</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.426585</td>\n","      <td>1.119107</td>\n","      <td>1.000000</td>\n","      <td>0.727273</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>-1.549782</td>\n","    </tr>\n","    <tr>\n","      <th>2497</th>\n","      <td>1</td>\n","      <td>-0.839488</td>\n","      <td>0.333333</td>\n","      <td>0</td>\n","      <td>0.714286</td>\n","      <td>1.818991</td>\n","      <td>1.602749</td>\n","      <td>1.000000</td>\n","      <td>0.636364</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>-0.896240</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59423c5d-b001-4465-90a7-290e58ba21d2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-59423c5d-b001-4465-90a7-290e58ba21d2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-59423c5d-b001-4465-90a7-290e58ba21d2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f43de9f3-3488-42c0-9fb0-763da4a7e567\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f43de9f3-3488-42c0-9fb0-763da4a7e567')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f43de9f3-3488-42c0-9fb0-763da4a7e567 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 2300,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0026129984739922,\n        \"min\": -1.9653510157870109,\n        \"max\": 1.4784643872044199,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          0.9486466328980458,\n          0.021465562861891427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26152220105637275,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          0.3333333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF_Day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27659722047991475,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.14285714285714285,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0025665439042013,\n        \"min\": -3.173294555998156,\n        \"max\": 3.3698823936120728,\n        \"num_unique_values\": 395,\n        \"samples\": [\n          0.16621617087903698,\n          -2.0412570214635153\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9986769779145376,\n        \"min\": -2.475724626987788,\n        \"max\": 5.291420678296808,\n        \"num_unique_values\": 571,\n        \"samples\": [\n          2.317383628317948,\n          -1.5517519512662006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3853156680724125,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.3333333333333333,\n          0.6666666666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16966994801760335,\n        \"min\": 0.09090909090909126,\n        \"max\": 1.0,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          1.0,\n          0.636363636363635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04565059539967314,\n        \"min\": 0.6666666666666666,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          0.6666666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0141323830665514,\n        \"min\": -2.2033246898282086,\n        \"max\": 2.8071675101736697,\n        \"num_unique_values\": 460,\n        \"samples\": [\n          0.15969282264573953,\n          0.10233637232207543\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import time\n","import numpy as np\n","from sklearn.model_selection import GridSearchCV\n","import xgboost as xgb\n","\n","# xgboost 파라미터 그리드 정의\n","param_grid = {\n","    'max_depth': [3, 6, 9],  #트리의 최대 깊이\n","    'eta': [0.1, 0.3, 0.5],  # 학습률을 지정하는 하이퍼파라미터로, 각 트리의 가중치를 조절\n","    'n_estimators': [50, 100, 200], # 앙상블에 포함될 트리의 개수\n","    'min_child_weight': [1, 3, 5], # 트리에서 한 노드가 분할되기 위한 최소한의 샘플 수, 값이 높을수록 트리 분할이 보수적\n","    'gamma': [0, 0.1, 0.2],        # 트리의 분할을 결정할 때 필요한 최소 손실 감소 값을 지정, 이 값이 클수록 알고리즘은 보수적으로 분할\n","    'colsample_bytree': [0.6, 0.8, 1.0], # 각 트리를 구성하는 특성(feature)의 비율을 지정,값이 작을수록 과적합을 방지\n","    'subsample': [0.8, 1.0], # 각 트리를 학습하는 데 사용되는 훈련 데이터의 샘플링 비율을 지정, 값이 작을수록 과적합을 방지\n","    'random_state': [42]\n","    }\n","\n","# XGBoost 모델 정의\n","xgb_model = xgb.XGBClassifier(objective='multi:softmax', num_class=6, eval_metric='merror') #다중 클래스 분류 문제를 다루고 있으므로 multi:softmax를 설정 # 클래스 6이다.\n","                                                                #평가 지표를 설정,분류 오류율을 평가 지표로 사용하고 있으므로, merror를 설정\n","# 클래스 6을 클래스 0으로 변환\n","y_train_fixed = np.where(y_train == 6, 0, y_train)\n","y_test_fixed = np.where(y_test == 6, 0, y_test)\n","\n","# 그리드 서치 객체 생성\n","grid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=5, scoring='f1_weighted', verbose=1, n_jobs=-1) #f1_weighted,f1_marco\n","\n","# 그리드 서치 수행\n","start_time = time.time()\n","grid_search.fit(X_train, y_train_fixed)\n","end_time = time.time()\n","\n","# 학습 소요 시간 계산\n","training_time = end_time - start_time\n","print(\"Training time:\", training_time, \"seconds\")\n","\n","# 최적의 하이퍼파라미터 출력\n","print(\"최적의 하이퍼파라미터:\", grid_search.best_params_)\n","\n","# 15-16분 정도 걸리는데 하이퍼 opt는 별로 안 걸리긴 함."],"metadata":{"id":"3z4jKvHek2h7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709540749259,"user_tz":-540,"elapsed":1753637,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"80c0a1d0-dd33-4ed7-c58f-3356de8b879d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 1458 candidates, totalling 7290 fits\n","Training time: 1753.312533378601 seconds\n","최적의 하이퍼파라미터: {'colsample_bytree': 1.0, 'eta': 0.1, 'gamma': 0.1, 'max_depth': 9, 'min_child_weight': 1, 'n_estimators': 100, 'random_state': 42, 'subsample': 0.8}\n"]}]},{"cell_type":"code","source":["import time\n","\n","start_time = time.time()\n","# xgboost 파라미터 지정\n","params = {\n","    'max_depth': 9,\n","    'eta': 0.1,\n","    'objective': 'multi:softmax',\n","    'num_class': 7,\n","    'eval_metric': 'merror',\n","    'n_estimators': 100,\n","    'min_child_weight': 1,\n","    'gamma': 0.1,\n","    'colsample_bytree': 1,\n","    'subsample': 0.8,\n","    'random_state': 42\n","    }\n","## 그리드 서치할 때 random_state =42\n","# 학습횟수\n","num_rounds = 400\n","\n","eval_list = [\n","    (dtr, 'train'),\n","    (dval, 'eval')\n","] # XGBoost 모델이 학습하는 동안 훈련 세트와 검증 세트를 평가하기 위한 리스트\n","\n","xgb_model = xgb.train(\n","    params=params, # 하이퍼 파라미터가 들어있는 딕셔너리\n","    dtrain = dtr, # 훈련 데이터 Feature + Label\n","    num_boost_round=num_rounds, # 훈련 횟수\n","    early_stopping_rounds=50, # 성능 개선(Loss가 낮아지면 성능이 개선됨)이 50라운드 이내에 이루어지지 않으면 학습을 종료\n","    evals = eval_list # 검증 세트 지정. 여기에서는 훈련 세트와 검증세트에 대한 성능을 한꺼번에 확인\n",")\n","\n","end_time = time.time()\n","\n","# 학습 소요 시간 계산\n","training_time = end_time - start_time\n","print(\"Training time:\", training_time, \"seconds\")"],"metadata":{"id":"GHtX1KabQI6S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709788120375,"user_tz":-540,"elapsed":1074,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"b81ad619-3514-460f-8255-277db95c7f6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\ttrain-merror:0.07130\teval-merror:0.13889\n","[1]\ttrain-merror:0.05261\teval-merror:0.12153\n","[2]\ttrain-merror:0.04739\teval-merror:0.12153\n","[3]\ttrain-merror:0.04435\teval-merror:0.10764\n","[4]\ttrain-merror:0.04000\teval-merror:0.10590\n","[5]\ttrain-merror:0.03565\teval-merror:0.10417\n","[6]\ttrain-merror:0.02957\teval-merror:0.09549\n","[7]\ttrain-merror:0.02957\teval-merror:0.09549\n","[8]\ttrain-merror:0.02870\teval-merror:0.09896\n","[9]\ttrain-merror:0.02739\teval-merror:0.09896\n","[10]\ttrain-merror:0.02478\teval-merror:0.09896\n","[11]\ttrain-merror:0.02391\teval-merror:0.09375\n","[12]\ttrain-merror:0.02217\teval-merror:0.09201\n","[13]\ttrain-merror:0.02000\teval-merror:0.09722\n","[14]\ttrain-merror:0.01957\teval-merror:0.09722\n","[15]\ttrain-merror:0.01870\teval-merror:0.09201\n","[16]\ttrain-merror:0.01696\teval-merror:0.09201\n","[17]\ttrain-merror:0.01565\teval-merror:0.09549\n","[18]\ttrain-merror:0.01565\teval-merror:0.09201\n","[19]\ttrain-merror:0.01478\teval-merror:0.09375\n","[20]\ttrain-merror:0.01348\teval-merror:0.09722\n","[21]\ttrain-merror:0.01261\teval-merror:0.09896\n","[22]\ttrain-merror:0.01261\teval-merror:0.09896\n","[23]\ttrain-merror:0.01087\teval-merror:0.09549\n","[24]\ttrain-merror:0.01000\teval-merror:0.09549\n","[25]\ttrain-merror:0.00913\teval-merror:0.09549\n","[26]\ttrain-merror:0.00826\teval-merror:0.09549\n","[27]\ttrain-merror:0.00783\teval-merror:0.09549\n","[28]\ttrain-merror:0.00783\teval-merror:0.09549\n","[29]\ttrain-merror:0.00739\teval-merror:0.09549\n","[30]\ttrain-merror:0.00652\teval-merror:0.09201\n","[31]\ttrain-merror:0.00565\teval-merror:0.09201\n","[32]\ttrain-merror:0.00478\teval-merror:0.09201\n","[33]\ttrain-merror:0.00478\teval-merror:0.09201\n","[34]\ttrain-merror:0.00348\teval-merror:0.09201\n","[35]\ttrain-merror:0.00348\teval-merror:0.09375\n","[36]\ttrain-merror:0.00304\teval-merror:0.09375\n","[37]\ttrain-merror:0.00261\teval-merror:0.09375\n","[38]\ttrain-merror:0.00261\teval-merror:0.09722\n","[39]\ttrain-merror:0.00217\teval-merror:0.09549\n","[40]\ttrain-merror:0.00217\teval-merror:0.09375\n","[41]\ttrain-merror:0.00174\teval-merror:0.09375\n","[42]\ttrain-merror:0.00130\teval-merror:0.09549\n","[43]\ttrain-merror:0.00174\teval-merror:0.09549\n","[44]\ttrain-merror:0.00130\teval-merror:0.09549\n","[45]\ttrain-merror:0.00130\teval-merror:0.09549\n","[46]\ttrain-merror:0.00130\teval-merror:0.09375\n","[47]\ttrain-merror:0.00130\teval-merror:0.09375\n","[48]\ttrain-merror:0.00130\teval-merror:0.09375\n","[49]\ttrain-merror:0.00130\teval-merror:0.09375\n","[50]\ttrain-merror:0.00087\teval-merror:0.09201\n","[51]\ttrain-merror:0.00087\teval-merror:0.09201\n","[52]\ttrain-merror:0.00087\teval-merror:0.09201\n","[53]\ttrain-merror:0.00087\teval-merror:0.09201\n","[54]\ttrain-merror:0.00087\teval-merror:0.09201\n","[55]\ttrain-merror:0.00087\teval-merror:0.09201\n","[56]\ttrain-merror:0.00087\teval-merror:0.09201\n","[57]\ttrain-merror:0.00087\teval-merror:0.09201\n","[58]\ttrain-merror:0.00087\teval-merror:0.09201\n","[59]\ttrain-merror:0.00087\teval-merror:0.09201\n","[60]\ttrain-merror:0.00087\teval-merror:0.09201\n","[61]\ttrain-merror:0.00087\teval-merror:0.09201\n","Training time: 0.7715494632720947 seconds\n"]}]},{"cell_type":"code","source":["## 하이퍼 opt 도전! 오리지널에 있는데 아직 이해가..."],"metadata":{"id":"hJ9goz3BUnII"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 처음 10개 샘플에 대한 예측값을 출력(소수점 셋째)\n","pred_props = xgb_model.predict(dtest)\n","print(np.round(pred_props[:10], 3))"],"metadata":{"id":"sgG3I2TWso_b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709788124615,"user_tz":-540,"elapsed":2,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"e6a9aaec-ec11-44ba-ec42-ff46f6e852b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2. 2. 3. 4. 2. 2. 2. 2. 3. 2.]\n"]}]},{"cell_type":"code","source":["# 오차행렬\n","from sklearn.metrics import confusion_matrix\n","\n","y_matrix = confusion_matrix(y_test, pred_props)\n","print(\"오차 행렬 : \\n{}\".format(y_matrix))\n","\n","# 종속이 다중분류라 average를 'macro'를 부여\n","# https://data-minggeul.tistory.com/11 참고\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n","\n","accuracy = accuracy_score(pred_props, y_test)\n","precision = precision_score(pred_props, y_test, average='weighted')\n","recall = recall_score(pred_props, y_test, average='weighted')\n","f1 = f1_score(pred_props, y_test, average='weighted')\n","\n","print(\"정확도 : {}\".format(accuracy))\n","print(\"정밀도 : {}\".format(precision))\n","print(\"재현율 : {}\".format(recall))\n","print(\"F1 : {}\".format(f1))"],"metadata":{"id":"mv4rnvubbbY_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709788126159,"user_tz":-540,"elapsed":2,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"d78447f4-4c00-4fa8-b0cb-7743e6792e61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬 : \n","[[ 39  10   0   0   0   0]\n"," [  3 370  13   0   0   0]\n"," [  0  10 180  10   0   0]\n"," [  0   0   7 252   3   0]\n"," [  0   0   0   7  44   2]\n"," [  0   0   0   0   3   6]]\n","정확도 : 0.9290928050052137\n","정밀도 : 0.9310097602115137\n","재현율 : 0.9290928050052137\n","F1 : 0.9297129883405856\n"]}]},{"cell_type":"code","source":["# 과적합 확인\n","pred_train = xgb_model.predict(dtr)\n","\n","print(\"훈련 세트 예측 결과:\")\n","print(\"훈련 세트 정확도:\", accuracy_score(pred_train, y_train))\n","print(\"훈련 세트 정밀도:\", precision_score(pred_train, y_train, average='weighted'))\n","print(\"훈련 세트 재현율:\", recall_score(pred_train, y_train, average='weighted'))\n","print(\"훈련 세트 F1:\", f1_score(pred_train, y_train, average='weighted'))\n","\n","print(\"\\n테스트 세트 예측 결과:\")\n","print(\"테스트 세트 정확도:\", accuracy_score(pred_props, y_test))\n","print(\"테스트 세트 정밀도:\", precision_score(pred_props, y_test, average='weighted'))\n","print(\"테스트 세트 재현율:\", recall_score(pred_props, y_test, average='weighted'))\n","print(\"테스트 세트 F1:\", f1_score(pred_props, y_test, average='weighted'))"],"metadata":{"id":"qibBCwkKcZwE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709788130352,"user_tz":-540,"elapsed":308,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"d3a19362-821c-4545-e985-5b76cee30dac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 세트 예측 결과:\n","훈련 세트 정확도: 0.9991304347826087\n","훈련 세트 정밀도: 0.9992\n","훈련 세트 재현율: 0.9991304347826087\n","훈련 세트 F1: 0.9991452569169958\n","\n","테스트 세트 예측 결과:\n","테스트 세트 정확도: 0.9290928050052137\n","테스트 세트 정밀도: 0.9310097602115137\n","테스트 세트 재현율: 0.9290928050052137\n","테스트 세트 F1: 0.9297129883405856\n"]}]},{"cell_type":"code","source":["# feature importance\n","\n","from xgboost import plot_importance\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","fig, ax = plt.subplots(figsize=(10, 12))\n","plot_importance(xgb_model, ax=ax)"],"metadata":{"id":"wAnLPYv-ajhJ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1709536315709,"user_tz":-540,"elapsed":1183,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"51b76c6e-5d92-4b33-9ecd-672dbfa5f7bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Feature importance'}, xlabel='F score', ylabel='Features'>"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1200 with 1 Axes>"],"image/png":"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JSn5JY8//PCDnnrqKVWuXFlvvfWWZs6cqZdeeslpvC1btqhhw4by9/fX0KFDlZCQoI8//lhTpkzRN998I39/f9lsNpeuEQAAAPdvypQp8vT0VPPmzSVJTz/9tJYvX66jR48qPj5eS5Ys0cWLF3X9+nVJ0oQJE3T27FnVqFFD1atX15EjRzR27NgUx7527Zpy5crl1JYrVy5FRkam7aKQYWX4p0fa7Xb17t1bVapU0fTp0xUTE6OBAwdq0qRJeu+995z6Xr58WX379tWgQYP0wgsvaP369Xr//ffl5+fn6BMdHa3ffvtNGzZs0OnTp9WpUyc1atRI3bt31/HjxxUXF6fp06e7epkAAACZ2l//wdxut8tut6f4j+h2u13Tpk3Txo0btWjRIrm7u8tms6lbt26KjIxU9+7dlZSUpPbt26tatWpyc3OTzWZT//79VaJECS1cuFAWi0UzZ87UG2+8oeXLl8vNzS3ZMWw2233N6c57/sHfdUyp+YMcP0OEtuDgYI0fP96pLSkpSQULFlRoaKiOHz+upUuXKnv27MqePbv69u2r7t27J/vXkT179sjT01MvvfSSrFarOnTooFWrVjn1iYuLU9++feXp6any5curRIkSOnXqVJqvEQAAAHcXEhLi+DoiIkLx8fFObdLtvw/nz5+vEydOaMSIEbp+/bpTn+bNmzvOvEnSN998o4CAAG3cuFG7d+/WnDlzdObMGUlS48aNtXz5cq1bt05PPPGE03E8PDx05MgRp7H/+OMPubm5JZvTHVw66XqPUs0zRGgbOXKkOnfu7NS2dOlSLVy4UOHh4bLZbKpZs6bTdpvNluwU9Z9//qlChQrJarU62ipWrKijR4863ufJk0c5cuRwvM+WLZvi4+NTczkAAAB4QIGBgY6vfXx8FBcX59QmSePGjVNERIRWrVql3LlzO207fPiwbty4oVq1akmSLl26pPPnz6tNmzaKjY2VJJUtW1aPPfaYJOnq1auSJD8/v2T3r9WoUUPnz593Ov7Fixf1zDPPJJuTzWZTaGio/P39nf4GRdoxpeYxMTE6duzYffXNEKHtXjw8POTp6anff//9H/smJSXJ3d25JH8/3Z3SzaYAAABIX3/949tischisTi1/fbbb9q4caM2bdqkvHnzJtv/+PHjmjp1qv773/8qb968eu+999SwYUP5+voqISFBvr6+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7t01duzYe54tADKjkJAQSdLs2bNVp04dRUVF6dSpU07b7oiPj9e5c+ec2mvXri1J+t///idJaty4sdatW6dPP/1UTz/9tNP+V65cUXR0tNP+J06ckMViUUhISIYJbXeEhoam9xQyFertetTc9ai5a1Fv13uUap7pQ1tISIhOnz6tZ555RpJUtGhRBQYGas2aNerSpYsSEhJUuHBhR39/f3/H1+Hh4bLZbKpZs6bTmDabTZGRkfLx8XHNIoBHRGBgoHbv3q0zZ87ogw8+kKenp86fP+/Y9ldZs2ZVkSJFkrX/XdGiRZUtW7Zk/UqXLq2QkBCn9gsXLih37tyqUqVKKqzGDDabTaGhofL393e6FBRpg3q7HjV3PWruWtTb9UypeUxMjI4dO3ZffTN9aFu5cqUSExPVsGFDR1tCQoIuXbqkF198UZLk7v5/Zfrrv857eHjI09NTv//+u+smDDzCrFarvvrqK129elWNGjWSdPsySEkKCgrSO++8oxYtbn8At8VikZubm+OXqd1u18SJE9WuXTuVLVtW0u2zceHh4SpWrFiyX7oBAQFavny57Ha742f40KFDqlSpUob8P0Wr1Zoh12Uq6u161Nz1qLlrUW/XS++aP8ixM3Voi46O1qZNm/Tuu++qVq1ajvbY2Fh16NBBhw8fltVq1f/+9z+VLl1akvNp1GLFiikmJkbh4eEqWrSoJCkqKkoJCQnKkyePaxcDPCKGDx+u//znP473Fy9e1HPPPad169YpV65cd93PYrHo3LlzevfddzVjxgx5eXlp5syZypIliyMATp06VQkJCRo+fLjq168vLy8vzZ07V6+99pqOHTumVatWafLkyWm+RgAAgNSUsW7qeECbNm2Sh4eH2rVrp+LFizteZcuWVYMGDbRmzRpVq1ZNn376qW7evKlTp05p5cqVjv3LlCmjypUra9y4cYqIiNCNGzc0evRoDR06NB1XBZgtV65cKlSokOOVL18+SVKhQoV08OBBx4dmnz9/XsHBwfL391e3bt0kSePGjZOvr6/at2+voKAghYWF6bPPPpOnp6ck6c8//9SlS5ck3b68ct68edq1a5dq1Kih/v37a8CAAXrqqafSZd0AAAAPK1OfaVu9erVatWqlrFmzJtv27LPP6s0339TSpUv1zjvvqE6dOipfvrx69Oih3r17Oy6TnDp1qsaOHauG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teqzzz7TM888oy5dukiSatSoodOnTyskJESvv/66JDldKmm327VmzRrVqFHDaWxJKlasmLJkyeLUvnfvXhUqVChZ38zCZrMpNDTUUW+kPWruWtTb9ai561Fz16LermdKzWNiYnTs2LH76pthQluxYsUkScePH7/rGbMHtW3bNg0ZMkSjRo1S27ZtHe0lSpTQ+fPndevWLWXLli3ZfidPnlSJEiVSZQ54MH/9wbNYLI7wbLVaZbVaZbfblZSU5NQvISHB0efXX3+Vh4eHAgICJEm///67bDabKlasmOyHOiAgQKtXr3ZqP3TokCpVqpTpf+neqTdch5q7FvV2PWruetTctai366V3zR/k2BnmQSR58uRRjRo19OmnnybbFhsbq/bt2+u333677/H27dunYcOGaebMmU6BTZKCgoKUPXt2LVu2LNl+N27c0FdffaXmzZs/8BqQ9ho0aKDNmzdr7969SkxM1IEDB/T111+rcePGkqQ9e/borbfe0pUrV3T16lWNHz9ezz//vDw9PSVJQ4cOdXyPtWrVSufPn9fKlSsVFxenH3/8UT/++KM6deqUbusDAABAxpNhzrRJ0ogRI/Tiiy9q4MCBGjp0qAoUKKCjR48qODhY2bJlc5w9+SeJiYkaOXKkBg8e7HSp3B2enp6Oz+RKSkpSp06d5OnpqYMHD2rEiBGqWrWqWrdundrLw33y9/eXJMfHLmzdulUWi0WhoaFq166dbty4oREjRujSpUsqWLCg3njjDbVv316S9MYbb+js2bNq2rSp3N3d1bJlS6cP6P7rA2ny5s2r+fPnKzg4WO+++64KFy6syZMnq2zZsi5eMQAAADKyDBXaypYtqxUrVmjWrFlq166dYmJiVKhQIbVs2VKvv/76XR8c8nchISE6ceKEgoODFRwc7LTtm2++UeHChdW2bVvlz59fCxYs0IcffqiEhAQVKVJEbdq00auvvio3twxzEvOR89ebSm02m0JCQpzuMXvllVf0yiuvpLivh4eHJk+efNex//500urVq2vdunX/bsIAAADAPWSo0CZJJUuW1IwZM+66fdu2bSm2d+7c2fFwkmrVquno0aP/eKw6deqoTp06DzVPAAAAALgfGS60PQrW9wm664c/AwAAAMBfcQ0fAAAAABiM0AYAAAAABiO0AQAAAIDBCG0AAAAAYDBCGwAAAAAYjNAG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UgAAAACA2x4qtH3++efJ2jw8PFSkSBHlzZv3X08KAAAAAHDbQ4W2devWady4ccnao6Ki1KdPH82ZM+dfTwwAAAAA8IChLTw8XKdPn9b69evVvHlz2e12p+1nzpzRzp07U3WCAAAAAJCZPVBoO3LkiD744AMlJCSoe/fuybZ7eHjo+eefT7XJAQAAAEBm90ChrXHjxmrcuLHatGmjdevWpdWcAAAAAAD/30N9TtvdAltsbKzq1q37ryYEAAAAAPg/D/UgkkuXLmncuHE6ePCg02e2RUdHq0CBAqk2OQAAAADI7B7qTNuoUaN069Yt9ezZU9euXVP//v3VuHFj+fn56b///W9qzxEAAAAAMq2HCm0hISGaOXOmOnXqJKvVqg4dOmj06NHq0qWLZs2aldpzBAAAAIBM66FCm7u7u9zcbu/q4eGha9euSZKaNGmir776KtUmBwAAAACZ3UOFtmrVqunNN99UbGys/P39NXHiRB08eFArVqyQh4dHas8RAAAAADKthwpt7777rvLnzy93d3cNHz5cv/zyizp06KBp06Zp2LBhqT1HAAAAAMi0HurpkXny5NH48eMlSaVLl9Z3332nK1euyMfHR1arNVUnCAAAAACZ2UOdaZOkixcv6qOPPlJwcLAsFovy58+vQ4cOpebcAAAAACDTe6jQ9t1336lJkybauXOnli9fLkm6cOGCXn31VR5EAgAAAACp6KFC24wZMzRt2jQtWrRIFotFkvTYY49pzpw5mjt3bqpOEAAAAAAys4cKbeHh4WrQoIEkOUKbJFWvXl3nzp1LnZkBAAAAAB4utD3++OM6evRosvadO3cqb968/3pSAAAAAIDbHurpkS+88IK6d++uDh06yGazadGiRTp69Kg2bdqkoUOHpvYcAQAAACDTeqjQ1qVLFxUoUECrV69W0aJFtW7dOhUtWlRz585VUFBQas8RAAAAADKtBwptTZs21ebNmyVJTZo0UZMmTdSjRw/Nnz8/TSYHAAAAAJndA93TduHChWRte/bsSbXJAAAAAACcPVBo++uTIu+w2+2pNhkAAAAAgLOHenrkX6UU5AAAAAAAqeNfhzYAAAAAQNp5oAeR2Gw2rVixwumSyJTannvuudSbIQAAAABkYg8U2goUKKB58+bds81isRDa/kHrObt06lpiuhz79MQW6XJcAAAAAA/ngULbtm3b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fvut/Pz8NGLECHuok6TNmzcrLi5OTz31lNLS0vTMM88oIiJCu3bt0uLFi7Vy5Up98sknlbJuAEDFIbQBAFCOzpw5o1q1asnV1VU33XSTVq9erb/97W8yxiguLk6RkZHy8vKSl5eXZsyYoaCgIEnS2rVrNWLECN166626/vrrNXr0aGVkZOj777+33/f999+vhg0bysXFRevXr1fLli0VFhYmNzc3+fj4aPDgwYqPj6+spQMAKgh/0wYAwBVMmzZNM2bMcGjr3LmzFi1aVGrsCy+8oAkTJuhf//qXgoOD9fDDD6t58+bKysrSmTNndOutt9rH3nnnnZKk06dPKycnR3fccYe9r3bt2mrQoIFSU1Ptbbfccov966NHjyoxMVH+/v72NmOMmjVr9ucXDACwFEIbAABX8EcuRBIeHq4ePXpo69at2rJli8LCwjR37lx17NhRklRSUlLqmIu3QP4vFxcX+9dubm72r6+//np16dJF77zzztUuAwBQRbE9EgCAcpSVlaX69eurf//+iomJ0YgRI7R27VrVq1dPnp6eOnLkiH1sUlKS4uPj1aBBA9WuXVs///yzve/06dPKzMzUbbfddsnvc9ttt+nQoUMyxtjbMjIyygyAAICqidAGAEA5SUtLU7du3fT111+rpKREOTk5OnTokD149evXT4sXL1Z6erqysrI0depU/fTTT3J1ddWDDz6o2NhYpaWl6ezZs5o9e7aaNGmigICAS36vBx54QNnZ2YqJiVFBQYGOHTumyMhILVmyxJlLBgA4AaENAIBy0rhxY02fPl3Tp09XQECAevXqpdq1a2vUqFGSpDFjxqht27bq3bu3evfurZYtW2rkyJGSpOjoaPn6+io8PFwhISHKyMjQ+++/77Al8mL169dXTEyMtmzZok6dOmnIkCEKCQlRZGSk09YLAHAOF3PxvgoAAAAAgKXwThsAAAAAWBihDQAAAAAsjNAGAAAAABZGaAMAAAAACyO0AQAAAICFEdoAAAAAwMIIbQAAAABgYYQ2AAAAALAwQhsAAAAAWBihDQAAAAAsjNAGAAAAABb2/wDd6EJeTemImQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["# 오버샘플링\n","from imblearn.over_sampling import SMOTE\n","smote = SMOTE(random_state=0)\n","X_train_over, y_train_over = smote.fit_resample(X_train, y_train)\n","print('smote 적용 전 학습용 피처/레이블 데이터 세트:', X_train.shape, y_train.shape)\n","print('smote 적용 후 학습용 피처/레이블 데이터 세트:', X_train_over.shape, y_train_over.shape)\n","print('smote 적용 후 레이블 값 분포:', pd.Series(y_train_over).value_counts())"],"metadata":{"id":"uQIi5RuqaoTU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709910929218,"user_tz":-540,"elapsed":3,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"207fb7ae-a375-421c-9c78-3364a209e99a"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["smote 적용 전 학습용 피처/레이블 데이터 세트: (2300, 13) (2300,)\n","smote 적용 후 학습용 피처/레이블 데이터 세트: (5454, 13) (5454,)\n","smote 적용 후 레이블 값 분포: 4    909\n","2    909\n","3    909\n","1    909\n","6    909\n","5    909\n","Name: NObeyesdad, dtype: int64\n"]}]},{"cell_type":"code","source":["# 클래스 레이블 확인\n","print(\"클래스 레이블:\", np.unique(y_train))\n","\n","# # 클래스 레이블 조정\n","y_train_adjusted = y_train - 1  # 클래스 레이블을 0부터 시작하도록 조정\n","y_test_adjusted = y_test - 1\n","\n","# SMOTE를 사용하여 오버샘플링\n","smote = SMOTE(sampling_strategy='auto', random_state=0)\n","X_train_over, y_train_over = smote.fit_resample(X_train, y_train_adjusted)\n","\n","print(\"클래스 레이블:\", np.unique(y_train_over))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QGQnNK70N_RE","executionInfo":{"status":"ok","timestamp":1709911465197,"user_tz":-540,"elapsed":419,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"0be6b5db-ac47-47a6-83db-9eefd8836dab"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["클래스 레이블: [1 2 3 4 5 6]\n","클래스 레이블: [0 1 2 3 4 5]\n"]}]},{"cell_type":"code","source":["from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix\n","\n","# XGBoost 모델 초기화\n","xg_clf = XGBClassifier(n_estimators=1000)\n","\n","# 오버샘플링된 데이터를 사용하여 모델 훈련\n","xg_clf.fit(X_train_over, y_train_over)\n","\n","# 테스트 데이터에 대한 예측 수행\n","y_pred = xg_clf.predict(X_test)\n","y_pred_r=xg_clf.predict(X_train)\n","# 정확도 계산\n","accuracy = accuracy_score(y_test_adjusted, y_pred)\n","print('정확도:', accuracy)\n","\n","# 오차 행렬 계산\n","conf_matrix = confusion_matrix(y_test_adjusted, y_pred)\n","print('오차 행렬:\\n', conf_matrix)\n","\n","# 정밀도 계산\n","precision = precision_score(y_test_adjusted, y_pred, average='weighted')\n","print('정밀도:', precision)\n","\n","# 재현율 계산\n","recall = recall_score(y_test_adjusted, y_pred, average='weighted')\n","print('재현율:', recall)\n","\n","# F1 점수 계산\n","f1 = f1_score(y_train_adjusted, y_pred_r, average='weighted')\n","print('F1 점수:', f1)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yCHyBhhHKERS","executionInfo":{"status":"ok","timestamp":1709911612654,"user_tz":-540,"elapsed":12913,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"123bb754-6fbf-4f07-902e-a388c982fdf0"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["정확도: 0.9228362877997914\n","오차 행렬:\n"," [[ 45   4   0   0   0   0]\n"," [  9 361  16   0   0   0]\n"," [  0  11 180   9   0   0]\n"," [  0   0   8 246   8   0]\n"," [  0   0   0   5  46   2]\n"," [  0   0   0   0   2   7]]\n","정밀도: 0.9242262850640632\n","재현율: 0.9228362877997914\n","F1 점수: 1.0\n"]}]},{"cell_type":"code","source":["from imblearn.over_sampling import SMOTE\n","from xgboost import XGBClassifier\n","from sklearn.metrics import f1_score\n","\n","# SMOTE를 사용하여 오버샘플링된 데이터로 모델 초기화 및 훈련\n","smote = SMOTE(random_state=0)\n","X_train_over, y_train_over = smote.fit_resample(X_train, y_train)\n","\n","xg_clf = XGBClassifier(n_estimators=1000)\n","xg_clf.fit(X_train_over, y_train_over)\n","\n","# 훈련된 모델로 훈련 데이터에 대한 예측 수행\n","train_pred = xg_clf.predict(X_train_over)\n","\n","# F1 점수 계산\n","train_f1 = f1_score(y_train_over, train_pred, average='weighted')\n","print('훈련 데이터에 대한 F1 점수:', train_f1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":389},"id":"kP4gGkYxo7Dh","executionInfo":{"status":"error","timestamp":1709911033050,"user_tz":-540,"elapsed":1343,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"9f97a5c6-4186-4b28-bfd0-6196b27f1744"},"execution_count":12,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Invalid classes inferred from unique values of `y`.  Expected: [0 1 2 3 4 5], got [1 2 3 4 5 6]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-9e24cade445a>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mxg_clf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mxg_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_over\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_over\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# 훈련된 모델로 훈련 데이터에 대한 예측 수행\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1469\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mclasses\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mexpected_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1470\u001b[0m             ):\n\u001b[0;32m-> 1471\u001b[0;31m                 raise ValueError(\n\u001b[0m\u001b[1;32m   1472\u001b[0m                     \u001b[0;34mf\"Invalid classes inferred from unique values of `y`.  \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1473\u001b[0m                     \u001b[0;34mf\"Expected: {expected_classes}, got {classes}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Invalid classes inferred from unique values of `y`.  Expected: [0 1 2 3 4 5], got [1 2 3 4 5 6]"]}]},{"cell_type":"code","source":["# feature importance\n","\n","from xgboost import plot_importance\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","fig, ax = plt.subplots(figsize=(10, 12))\n","plot_importance(xg_clf, ax=ax)\n","# 키 몸무게 나이 빼고 봐야할 것 같음.ㅇㅇ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"0nJmboa8N2L3","executionInfo":{"status":"ok","timestamp":1709604945394,"user_tz":-540,"elapsed":1241,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"94566ad4-1163-4ea2-80b0-54cf40ca1a2e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Feature importance'}, xlabel='F score', ylabel='Features'>"]},"metadata":{},"execution_count":51},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1200 with 1 Axes>"],"image/png":"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tWopMDBQ9evX16ZNm5LuJAEAKRKhDQDwwouPj1fr1q1VsmRJbd26VT/88IMuXLig/v37O/SbO3euTpw44dA2ffp0RUVF2X82b96sjBkzqkqVKpKkrVu3qlmzZsqVK9cj57F//3716NFDXbt21bZt29SyZUt9/PHHOn36dJKdKwAg5SG0/f82bdokX19fDRgwILmnAgB4Qjdu3FDnzp3Vtm1bubm5ycfHR1WqVNHhw4ftfc6ePatJkyapWbNmDx1r9OjRqlKlinx9fSVJly9f1syZM1WxYsVHziMiIkIVKlRQhQoV5O7urtq1a6tgwYJavnz5fzo/AEDKRmj7/0VERKhmzZpauXKlbt26ldzTAQA8AW9vbzVs2FCurndv1T569KiWLFmit956y95nyJAhaty4sV555ZUHjvPPP/9o6dKl6tixo73trbfeUv78+R9rHnv37lWhQoUc2goVKqSoqKgnOR0AABwQ2iRdunRJ69ev1yeffKIMGTJo7dq19m0XL15UixYtVLRoUdWpU0e//fabfH19FRMTI0k6efKk2rVrp1KlSqlEiRLq3r27YmNjk+tUACBFO3nypIoUKaIaNWrI399fn3zyiSRp48aN2rt3r9q2bfvQ/adMmaIGDRrIx8fnqY5/+fJleXt7O7R5e3vr0qVLTzUeAAAST4+UJC1btkx+fn7KmzevatWqpYULF+rtt9+WJPXu3Vu3b9/Whg0bdOnSJX366af2/Ww2mzp06KBixYpp1KhRiouLU5cuXTR8+HANGjQouU4HAFIUi8Vif50tWzZFRkbqn3/+0YABA9StWzeFh4drwIAB6t27t1xdXWW1WmWz2Rz2k+4GrmXLlmnlypUJtkl64H73u7f9/j42m+2R+/37XB6nL54tamEG6mAOapH0nuSzJLRJWrhwoZo0aSJJqlOnjiZMmKCYmBjlyJFDGzdu1OjRo5U+fXqlT59ejRo10ueffy5JioqK0uHDhzVv3jylSZNGadKkUceOHfX+++9r4MCBcnJySs7TAoAUITIyMtH2t956S/3799fNmzeVPXt2pUuXTpGRkTpx4oRiY2MT7Pfrr78qW7ZsOn/+vM6fP59gvBMnTujOnTsPPJ4kubu768CBAw59jhw5Imdn54fu929cTmkOamEG6mAOapE8Unxoi4yM1PHjx+33PeTOnVsBAQFavHixmjVr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1q1bDu0DBw6Up6en/RcakpQ5c2Y5OTkpICBATk5Oyp07t8M+Li4uypkzp0Pbpk2bdOTIkQTH/Pd8rl27Zu9jsVgUExOjli1bPnS/x2WxWBQVFSV/f/8E3/eI54tamIE6mINamIE6mINaJL24uDgdOnTosfo+VWibPXt2gjZ3d3flypVLGTNmfKKxHvQgkWrVqikmJkaBgYH2tvj4eC1atMghtP3XB5Ekxmq16sCBAypbtqysVqvatm2r4sWL66effpKPj48iIiI0evRoe/+6devqk08+0YABA7R27Vo1a9YsSeeDlOPffwg6OTnJycnJob1UqVLq06ePypcvr6CgIO3atUurVq1Sz5495eLiojfffFOzZ89WUFCQsmbNqlWrVtkfVHL/OM7OzgnGlu4+nCc8PFxBQUFq2rSpunTpotq1a8vX11fffPON3NzcFBoamqR/YLu4uPAXgCGohRmogzmohRmogzmoRdJ5ks/xqULbsmXLNHjw4ATtsbGx+uijjzRhwoSnGdbujz/+UExMjObPny8vLy97+44dOzRgwAB9/vnnDu1JbdGiRbpw4YKqVKmi8+fP6+TJkxo9erR99Wzfvn0O/UuXLq20adMqIiJChw8f1ptvvvnM5oaUwd/fX5J0584dSXe/m026e0lCjRo1dOXKFfXq1Uvnz59XtmzZ1K5dO4WFhUmSevfurZEjR6pZs2a6du2aXn31VU2YMEH58uWTdPcXIv/73/9ksVhktVrtx1q9erVy5sypY8eOKS4uTtLd+zu7dOmiTp066cKFC/L399eUKVOUOnXq5/p5AAAApGRPFNqio6N1/PhxLV++XDVq1JDNZnPY/s8//2jTpk3/eVIREREqV66cihQp4tCeM2dOjRw5Uj/88EOSr65Jd0PnypUrNWzYMPXs2VNZs2a138sWGRkpX19frVmzRvv371dsbKyuX7+utGnTytnZWbVq1dLIkSP15ptvKk2aNEk+N6Qsj7pevEmTJg/8f8DT01Off/65Pv/880S3//TTTw8d+99PgG3atKmaNm360H0AAADw7DxRaDtw4IDGjh2r27dv6/3330+w3d3dXY0bN/5PE7p27ZrWrFmjr776KsE2V1dX1alTR4sWLUqy0LZ69Wr7Koarq6uKFCmi0aNH279c29XVVf3799eIESM0ZswY1axZU+PGjVOzZs1UtWpV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AAAAMBihDQAAAAAMRmgDAAAAAIMR2gAAAADAYIQ2AAAAADAYoQ0AAAAADEZoAwAAAACDEdoAAAAAwGCENgAAAAAwGKENAAAAAAxGaAMAAAAAgxHaAAAAAMBghDYAAAAAMBihDQAAAAAMRmgDAAAAAIMR2gAAAADAYIQ2AAAAADAYoQ0AAAAADEZoAwAAAACDEdoAAAAAwGCENgAAAAAwGKENAAAAAAxGaAMAAAAAg7km9wRSotoTtujY5TtJMtbxYTWTZBwAAAAAZmKl7SWxceNGhYSEqHPnzgm2zZo1S9WqVdMbb7yhBg0aaM+ePfZtFy9eVLdu3RQSEqISJUrovffe0969ex94nK1btyosLEzFihVTzZo1tXz58mdyPgAAAADuIrQ9wq1bt+Tr66vff/89uafyQFOnTlV4eLjy5MmTYNvSpUs1ZswYDR48WNu3b9c777yjtm3b6vr165KkAQMG6MKFC1q5cqU2b96sgIAAffjhh7JYLAnGOnv2rDp06KDGjRtr69at6t27t/r27auoqKhnfo4AAABASvXChbbjx4+rZ8+eKleunIoWLaqyZcuqY8eO2rdvX3JPLdm4u7tr4cKFiYa29evX66233lJQUJDc3NzUqFEjZc+eXb/88oskae/evapcubIyZMggNzc31alTR+fPn9e5c+cSjLVixQrlzZtXYWFhcnd3V0hIiEJDQxUREfHMzxEAAABIqV6o0LZ//341aNBAmTJl0uLFi7Vr1y59//33ypQpkxo3bqzdu3cn9xSTxXvvvScvL68HbndycnJ47+3trf3790uSKlasqJUrV+rs2bOKi4vT0qVL5efnp6xZsyYYZ+/evSpUqJBDW6FChRwutwQAAACQtF6o0DZw4EBVqFBBXbt2VebMmeXk5KRcuXKpX79+6tKli1xd7z5X5cCBA2rRooWCgoIUHBys8PBw3b59W5K0ePFi1a5dW0uXLlVoaKgCAwPVuXNn+/a4uDh16dJFQUFBqly5stavX+8wh8uXL6tr164qW7asAgMD1b59e505c0aSFBMTI19fX3333XcqWbKkfvjhh+f46SSuUqVKWrVqlf7880/Fx8drzZo12rVrl65cuSJJ6t69u9zc3FSuXDkFBgZq5cqV+uqrrxIEPenuuadLl86hLX369Lp06dJzORcAAAAgJXphnh554cIF7dy5U999912i21u2bClJunHjhtq0aaPmzZtr6tSpOnPmjDp06KBvvvlG7dq1kySdPHlSe/bs0Q8//KCTJ0+qfv36Wrt2rWrUqKGvv/5aBw4c0MqVK+Xu7q5+/fo5HKdnz55ydXXVypUr5eLion79+qlXr16aPn26vc8ff/yh9evXK23atM/mw7jP/fee2Ww22Ww2h7ZatWopJiZG3bp1U2xsrKpVq6bKlSvL2dlZFotF/fv3l81m088//ywvLy99++23at26tVasWJFg/jabTVar1WF8q9Wa4JgvgnvzfdHm/bKhDuagFmagDuagFmagDuagFknvST7LFya0RUdHS5Ly5s370H6//vqrbDab2rZtK0nKnTu33n//fU2ePNke2q5fv65OnTrJw8NDr732mnx9fXX06FFJ0tq1a9W0aVP75YEffPCBVq9eLelucPzll1+0atUqeXt7S5K6du2qihUrOtwDVrduXXl6eibdyT9EZGSk/fXFixcVHx/v0CZJISEhCgkJsb8fMWKEChQooG3btmnx4sXq16+fzpw5ozNnzqhUqVL65ptvNHfuXJUsWTLB8Y4ePeow/r59+5QmTZoEx3xR8BAVM1AHc1ALM1AHc1ALM1AHc1CL5PHChLZ7l+vdufP/vt9s+/btat26taS7q0DZs2dXw4YNdeHCBfn7+9v72Ww2ubm52d9nyJDBIVSlSZNGN2/elCSdPn1auXLlsm+7PyTeC45169Z1mJuLi4tOnTolHx8fSVKOHDn+y6k+kYCAAPtrHx8f3bp1y6Ht+PHjOnr0qEJDQyVJN2/e1N9//62OHTuqSJEistlsypcvn32feytnr776qsM4klSuXDktWbLEoX3mzJkKDg5O0Nd0FotFUVFR8vf3l4uLS3JPJ8WiDuagFmagDuagFmagDuagFkkvLi5Ohw4deqy+L0xoy5s3r5ycnHT06FH7KliJEiXsaX/x4sUaP3683N3d9dprr2nFihUPHMvZ+cG38t2+fTvBJYf3pE6dWpK0YcMGZciQIcG+MTExkvRc/0O+/1hOTk5ycnJyaDt//ry6du2qOXPmyNfXV1988YVy586tkJAQOTk5qWTJkpoyZYry588vT09PzZgxQ6lSpVKpUqXk4uKi7t27y8/PT61atVKdOnU0fvx4+32B27Zt04YNGzR//vwX9n9eFxeXF3buLxPqYA5qYQbq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syVJmZmZ2r17t6Qz75szxig3N1cHDx502iVp7969uvbaa13apP/dsdu2bZsaNWrktOfk5CgvL6/C+JrsQg9ygXtRB3tQCztQB3tQCztQB3tQi6pR40LbTTfdpLffflsHDhzQtm3btGPHDiUlJWnu3LlauXKlPDw8KpV6KzuussLCwlRaWipfX1+Vl5crLCxM0pn3ztWqVUs9e/bUBx984LRL0ptvvqkOHTq4tElScHCwszXybN/XX3+t0tJS9enTx7mLV5OVlZUpNTVVwcHB8vLyqurp1FjUwR7Uwg7UwR7Uwg7UwR7U4sorLCzU/v37KzW2xoW2s1q2bKmWLVvqoYceUnZ2thISErRs2TLdcsstOnDgwE8eX9lxleXl5SUvLy/1799fS5YsUVRUlHx9fbVw4UL17dtX8fHxWrRokf7yl7+ob9+++ve//61//OMfWr16tby8vPTll19q/PjxWr9+vby9vTVgwAAtWbJEoaGh8vHx0Z///Gf16NGDJ0f+yNnrjqpFHexBLexAHexBLexAHexBLa6cS7mONerpkVlZWXr22Wd16tQpl/ZGjRqpdevWKioq0l133aV33nmnwhhJGjdunN58801JqvS4S/XUU0+pc+fOSkhI0G9+8xs1a9ZMSUlJatiwoRYvXqyVK1cqIiJCM2bM0IsvvqjWrVtLkoqKinTo0CEZYyRJY8aMUWhoqO699151795ddevW1QsvvPCz5gQAAACg6tSo0Obv769t27Zp3LhxOnjwoMrLy1VUVKQNGzYoJSVFMTExzkNAhgwZorS0NBljlJWVpalTpyolJUXdu3eXpEqPu1Te3t565plntH37du3atUuzZs1S3bp1JUmRkZFat26d9uzZo40bNyo2NtY5LioqSunp6apdu3aF83z++eeaPXu2rrvuusu8ggAAAADcrUZtj/T29taKFSs0f/58DR8+XCdPnpSnp6cCAwM1e/Zsde7cWZL01ltv6ZVXXtHo0aN1/PhxNWjQQB07dtSaNWucD6uuU6dOpcYBAAAAwOWoUaFNkm688UZNnz79omP8/Pw0adIkTZo06YqM+7H1o6K56wUAAACgUmrU9kgAAAAAqG4IbQAAAABgMUIbAAAAAFiM0AYAAAAAFiO0AQAAAIDFCG0AAAAAYDFCGwAAAABYjNAGAAAAABYjtAEAAACAxQhtAAAAAGAx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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"4SiqqjmjZTSa"},"execution_count":null,"outputs":[]}]}