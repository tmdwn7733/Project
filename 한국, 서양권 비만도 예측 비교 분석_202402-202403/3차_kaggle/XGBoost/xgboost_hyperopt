{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOK9pz5pLONiHYZ3tyzNou"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import time\n","import numpy as np\n","from sklearn.model_selection import GridSearchCV\n","import xgboost as xgb\n","import time\n","import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from sklearn.metrics import accuracy_score, r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import make_regression\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","import warnings\n","warnings.filterwarnings('ignore')\n","#기계학습 모델 생성, 학습, 평가\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, recall_score,precision_score,mean_squared_error,mean_absolute_error,r2_score\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import plot_tree # 의사결정나무 규칙 시각화용\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import KFold\n","import sklearn.datasets as d\n","from tqdm import tqdm # 오 이거 신기하다.\n","# 시각화\n","import matplotlib.pyplot as plt\n","from matplotlib.colors import ListedColormap\n","import matplotlib.patches as mpatches\n","import matplotlib\n","matplotlib.rcParams['axes.unicode_minus'] = False\n","# 한글폰트 지원\n","from sklearn.datasets import load_iris, load_wine, load_breast_cancer\n","from sklearn.datasets import load_diabetes\n","from sklearn.model_selection import train_test_split, cross_validate\n","from sklearn.metrics import accuracy_score, precision_score, recall_score\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn import datasets\n","import xgboost as xgb\n","from xgboost import XGBClassifier, XGBRegressor\n","from xgboost import plot_importance, plot_importance\n","\n","import graphviz\n","\n","plt.style.use(['seaborn-whitegrid'])"],"metadata":{"id":"z3RNaikKUCoX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-v1_ahOrm2a5","executionInfo":{"status":"ok","timestamp":1709552747975,"user_tz":-540,"elapsed":27266,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"c1c1016f-f04b-4380-af97-9f500e6de3a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["k_obe = pd.read_csv(\"/content/drive/MyDrive/멀티캠퍼스_머신러닝/세미 프로젝트 비만/ObesityDataSet_Labeled3.csv의 사본\")"],"metadata":{"id":"5fegtFyznAm7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k_obe.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"seSX0g3bnlOt","executionInfo":{"status":"ok","timestamp":1709552751233,"user_tz":-540,"elapsed":2,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"79940f61-e6d2-41ef-fa44-306863ce4046"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2111 entries, 0 to 2110\n","Data columns (total 18 columns):\n"," #   Column                          Non-Null Count  Dtype  \n","---  ------                          --------------  -----  \n"," 0   Gender                          2111 non-null   int64  \n"," 1   Age                             2111 non-null   float64\n"," 2   Height                          2111 non-null   float64\n"," 3   Weight                          2111 non-null   float64\n"," 4   family_history_with_overweight  2111 non-null   int64  \n"," 5   FAVC                            2111 non-null   int64  \n"," 6   FCVC                            2111 non-null   float64\n"," 7   NCP                             2111 non-null   float64\n"," 8   CAEC                            2111 non-null   int64  \n"," 9   SMOKE                           2111 non-null   int64  \n"," 10  CH2O                            2111 non-null   float64\n"," 11  SCC                             2111 non-null   int64  \n"," 12  FAF                             2111 non-null   float64\n"," 13  TUE                             2111 non-null   float64\n"," 14  CALC                            2111 non-null   int64  \n"," 15  MTRANS                          2111 non-null   int64  \n"," 16  NObeyesdad                      2111 non-null   int64  \n"," 17  BMI                             2111 non-null   float64\n","dtypes: float64(9), int64(9)\n","memory usage: 297.0 KB\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dER7doAK5Zrn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 스케일링 진행\n","\n","# 스케일링\n","std_scaler = StandardScaler()\n","mm_scaler = MinMaxScaler()\n","Added_kobe_Scaled = k_obe.copy()  # 새로운 DataFrame을 만들어 변경사항을 적용.\n","cont_vars = ['Age', 'Height', 'Weight', 'CH2O']  # standard\n","ordinal_vars = ['FCVC', 'NCP', 'TUE', 'CALC', 'FAF']  # min-max\n","Added_kobe_Scaled.loc[:, cont_vars] = std_scaler.fit_transform(Added_kobe_Scaled[cont_vars])  # .loc을 사용하여 값 할당\n","Added_kobe_Scaled.loc[:, ordinal_vars] = mm_scaler.fit_transform(Added_kobe_Scaled[ordinal_vars])  # .loc을 사용하여 값 할당\n","# FAF-Day 열 이름을 FAF로 변경\n","# Added_kobe_Scaled = Added_kobe_Scaled.rename(columns={'FAF_Day': 'FAF'})\n","\n","# 결과 확인\n","Added_kobe_Scaled.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"kmYt9RLtorlo","executionInfo":{"status":"ok","timestamp":1709552761438,"user_tz":-540,"elapsed":443,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"c8adc523-9a27-41e8-ec76-ddce2e3a7859"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Gender          Age        Height        Weight  \\\n","count  2111.000000  2111.000000  2.111000e+03  2.111000e+03   \n","mean      0.505921     0.000000 -5.385449e-16 -5.385449e-16   \n","std       0.500083     1.000237  1.000237e+00  1.000237e+00   \n","min       0.000000    -1.625448 -2.698006e+00 -1.817304e+00   \n","25%       0.000000    -0.688066 -7.683883e-01 -8.062914e-01   \n","50%       1.000000    -0.241897 -1.263207e-02 -1.369510e-01   \n","75%       1.000000     0.265964  7.159595e-01  7.960531e-01   \n","max       1.000000     5.782584  2.983646e+00  3.300136e+00   \n","\n","       family_history_with_overweight         FAVC         FCVC          NCP  \\\n","count                     2111.000000  2111.000000  2111.000000  2111.000000   \n","mean                         0.817622     0.883941     0.709522     0.561876   \n","std                          0.386247     0.320371     0.266963     0.259346   \n","min                          0.000000     0.000000     0.000000     0.000000   \n","25%                          1.000000     1.000000     0.500000     0.552913   \n","50%                          1.000000     1.000000     0.692751     0.666667   \n","75%                          1.000000     1.000000     1.000000     0.666667   \n","max                          1.000000     1.000000     1.000000     1.000000   \n","\n","              CAEC        SMOKE          CH2O          SCC          FAF  \\\n","count  2111.000000  2111.000000  2.111000e+03  2111.000000  2111.000000   \n","mean      1.140692     0.020843  1.077090e-16     0.045476     0.336766   \n","std       0.468543     0.142893  1.000237e+00     0.208395     0.283531   \n","min       0.000000     0.000000 -1.644905e+00     0.000000     0.000000   \n","25%       1.000000     0.000000 -6.905894e-01     0.000000     0.041502   \n","50%       1.000000     0.000000 -1.307326e-02     0.000000     0.333333   \n","75%       1.000000     0.000000  7.659959e-01     0.000000     0.555559   \n","max       3.000000     1.000000  1.618759e+00     1.000000     1.000000   \n","\n","               TUE         CALC       MTRANS   NObeyesdad          BMI  \n","count  2111.000000  2111.000000  2111.000000  2111.000000  2111.000000  \n","mean      0.328933     0.243802     1.808148     3.112269    29.700159  \n","std       0.304464     0.171833     0.463502     1.985062     8.011337  \n","min       0.000000     0.000000     1.000000     0.000000    12.998685  \n","25%       0.000000     0.000000     2.000000     1.000000    24.325802  \n","50%       0.312675     0.333333     2.000000     3.000000    28.719089  \n","75%       0.500000     0.333333     2.000000     5.000000    36.016501  \n","max       1.000000     1.000000     3.000000     6.000000    50.811753  "],"text/html":["\n","  <div id=\"df-eecf9492-db60-4079-b4e5-b9704b29a918\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>family_history_with_overweight</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>NCP</th>\n","      <th>CAEC</th>\n","      <th>SMOKE</th>\n","      <th>CH2O</th>\n","      <th>SCC</th>\n","      <th>FAF</th>\n","      <th>TUE</th>\n","      <th>CALC</th>\n","      <th>MTRANS</th>\n","      <th>NObeyesdad</th>\n","      <th>BMI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2.111000e+03</td>\n","      <td>2.111000e+03</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2.111000e+03</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","      <td>2111.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.505921</td>\n","      <td>0.000000</td>\n","      <td>-5.385449e-16</td>\n","      <td>-5.385449e-16</td>\n","      <td>0.817622</td>\n","      <td>0.883941</td>\n","      <td>0.709522</td>\n","      <td>0.561876</td>\n","      <td>1.140692</td>\n","      <td>0.020843</td>\n","      <td>1.077090e-16</td>\n","      <td>0.045476</td>\n","      <td>0.336766</td>\n","      <td>0.328933</td>\n","      <td>0.243802</td>\n","      <td>1.808148</td>\n","      <td>3.112269</td>\n","      <td>29.700159</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.500083</td>\n","      <td>1.000237</td>\n","      <td>1.000237e+00</td>\n","      <td>1.000237e+00</td>\n","      <td>0.386247</td>\n","      <td>0.320371</td>\n","      <td>0.266963</td>\n","      <td>0.259346</td>\n","      <td>0.468543</td>\n","      <td>0.142893</td>\n","      <td>1.000237e+00</td>\n","      <td>0.208395</td>\n","      <td>0.283531</td>\n","      <td>0.304464</td>\n","      <td>0.171833</td>\n","      <td>0.463502</td>\n","      <td>1.985062</td>\n","      <td>8.011337</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>-1.625448</td>\n","      <td>-2.698006e+00</td>\n","      <td>-1.817304e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.644905e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>12.998685</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>-0.688066</td>\n","      <td>-7.683883e-01</td>\n","      <td>-8.062914e-01</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>0.552913</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>-6.905894e-01</td>\n","      <td>0.000000</td>\n","      <td>0.041502</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>24.325802</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.000000</td>\n","      <td>-0.241897</td>\n","      <td>-1.263207e-02</td>\n","      <td>-1.369510e-01</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.692751</td>\n","      <td>0.666667</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.307326e-02</td>\n","      <td>0.000000</td>\n","      <td>0.333333</td>\n","      <td>0.312675</td>\n","      <td>0.333333</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>28.719089</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>0.265964</td>\n","      <td>7.159595e-01</td>\n","      <td>7.960531e-01</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.666667</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>7.659959e-01</td>\n","      <td>0.000000</td>\n","      <td>0.555559</td>\n","      <td>0.500000</td>\n","      <td>0.333333</td>\n","      <td>2.000000</td>\n","      <td>5.000000</td>\n","      <td>36.016501</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>5.782584</td>\n","      <td>2.983646e+00</td>\n","      <td>3.300136e+00</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>1.618759e+00</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>6.000000</td>\n","      <td>50.811753</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eecf9492-db60-4079-b4e5-b9704b29a918')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eecf9492-db60-4079-b4e5-b9704b29a918 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eecf9492-db60-4079-b4e5-b9704b29a918');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7d8844be-6b6a-4e33-807e-f93116fb5a18\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d8844be-6b6a-4e33-807e-f93116fb5a18')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7d8844be-6b6a-4e33-807e-f93116fb5a18 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"Added_kobe_Scaled\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.1489899111156,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5059213642823307,\n          1.0,\n          0.5000833972849265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.1275893260032,\n        \"min\": -1.625448303271646,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -0.24189744962683477,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2912767226646,\n        \"min\": -2.698006232283177,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -5.385449442047183e-16,\n          -0.01263206537746867,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2347322713196,\n        \"min\": -1.817304455519308,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -5.385449442047183e-16,\n          -0.13695102447196517,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"family_history_with_overweight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.0884633173935,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.817621980104216,\n          1.0,\n          0.3862472640373802\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.0884472137897,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8839412600663192,\n          1.0,\n          0.3203712366137241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.140707964677,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2111.0,\n          0.7095215307910944,\n          0.6927509999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.1640108908884,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2111.0,\n          0.56187601657982,\n          0.6666666666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CAEC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 745.9673857614043,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2111.0,\n          1.1406916153481763,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.292509173426,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.020843202273803884,\n          1.0,\n          0.14289309147889065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2995528968173,\n        \"min\": -1.6449050708254869,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0770898884094366e-16,\n          -0.013073263985237213,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.287956046835,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.045476077688299386,\n          1.0,\n          0.208395241212829\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2224438480508,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.3367658986262435,\n          0.3333333333333333,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2277286908611,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2111.0,\n          0.328932961866414,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 746.2461016398959,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2111.0,\n          0.2438023053844939,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MTRANS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 745.7317759763589,\n        \"min\": 0.4635019480765296,\n        \"max\": 2111.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2111.0,\n          1.8081477972524869,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NObeyesdad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 745.3387194997521,\n        \"min\": 0.0,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.1122690667929893,\n          3.0,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 736.8437588687832,\n        \"min\": 8.011336612534134,\n        \"max\": 2111.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.700158778414636,\n          28.71908906003529,\n          2111.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# xgboost용 데이터 분할\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    Added_kobe_Scaled.drop([\"family_history_with_overweight\",\"BMI\",\"MTRANS\",\"CAEC\",\"NObeyesdad\"], axis=1),\n","    Added_kobe_Scaled['NObeyesdad'],\n","    random_state=42,\n","    stratify=Added_kobe_Scaled['NObeyesdad']\n",")\n","# 훈련 데이터를 훈련 세트와 검증 세트로 나눔\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n","# XGBoost 모델에 필요한 형식으로 데이터 변환\n","dtr = xgb.DMatrix(data=X_train, label=y_train)\n","dtest = xgb.DMatrix(data=X_test, label=y_test)\n","dval = xgb.DMatrix(data=X_val, label=y_val)\n","X_train.shape, X_val.shape, X_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DLkasjCno9EI","executionInfo":{"status":"ok","timestamp":1709552781347,"user_tz":-540,"elapsed":2,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"ade4001b-2b3c-42dd-ba45-ad9ae985d73e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1266, 13), (317, 13), (528, 13))"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"FDf2aye9pUJu","executionInfo":{"status":"ok","timestamp":1709552783962,"user_tz":-540,"elapsed":5,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"4b5dfba4-b4b9-424e-d9cd-33662dbb36f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Gender       Age    Height    Weight  FAVC      FCVC       NCP  SMOKE  \\\n","512       0 -0.358466  0.104946 -1.322153     1  0.940081  0.666667      0   \n","942       0  0.811821 -0.455662 -0.588737     1  0.500000  0.666667      0   \n","626       1 -1.093153  1.174501 -1.059973     1  0.741990  0.920926      0   \n","744       1 -0.994977  0.396908 -1.387719     1  0.435607  0.666667      0   \n","359       0  1.369288 -1.518795 -1.473596     0  0.500000  0.666667      0   \n","\n","         CH2O  SCC       FAF       TUE      CALC  \n","512 -1.593741    0  0.735579  0.687325  0.000000  \n","942 -1.185246    0  0.536600  0.000000  0.333333  \n","626 -0.013073    0  0.666667  0.465025  0.000000  \n","744 -1.181892    0  0.228293  0.743611  0.333333  \n","359 -0.013073    0  0.333333  0.000000  0.333333  "],"text/html":["\n","  <div id=\"df-01674df2-1627-4cfd-9fbd-990628006e6c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>FAVC</th>\n","      <th>FCVC</th>\n","      <th>NCP</th>\n","      <th>SMOKE</th>\n","      <th>CH2O</th>\n","      <th>SCC</th>\n","      <th>FAF</th>\n","      <th>TUE</th>\n","      <th>CALC</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>512</th>\n","      <td>0</td>\n","      <td>-0.358466</td>\n","      <td>0.104946</td>\n","      <td>-1.322153</td>\n","      <td>1</td>\n","      <td>0.940081</td>\n","      <td>0.666667</td>\n","      <td>0</td>\n","      <td>-1.593741</td>\n","      <td>0</td>\n","      <td>0.735579</td>\n","      <td>0.687325</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>942</th>\n","      <td>0</td>\n","      <td>0.811821</td>\n","      <td>-0.455662</td>\n","      <td>-0.588737</td>\n","      <td>1</td>\n","      <td>0.500000</td>\n","      <td>0.666667</td>\n","      <td>0</td>\n","      <td>-1.185246</td>\n","      <td>0</td>\n","      <td>0.536600</td>\n","      <td>0.000000</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>626</th>\n","      <td>1</td>\n","      <td>-1.093153</td>\n","      <td>1.174501</td>\n","      <td>-1.059973</td>\n","      <td>1</td>\n","      <td>0.741990</td>\n","      <td>0.920926</td>\n","      <td>0</td>\n","      <td>-0.013073</td>\n","      <td>0</td>\n","      <td>0.666667</td>\n","      <td>0.465025</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>744</th>\n","      <td>1</td>\n","      <td>-0.994977</td>\n","      <td>0.396908</td>\n","      <td>-1.387719</td>\n","      <td>1</td>\n","      <td>0.435607</td>\n","      <td>0.666667</td>\n","      <td>0</td>\n","      <td>-1.181892</td>\n","      <td>0</td>\n","      <td>0.228293</td>\n","      <td>0.743611</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>359</th>\n","      <td>0</td>\n","      <td>1.369288</td>\n","      <td>-1.518795</td>\n","      <td>-1.473596</td>\n","      <td>0</td>\n","      <td>0.500000</td>\n","      <td>0.666667</td>\n","      <td>0</td>\n","      <td>-0.013073</td>\n","      <td>0</td>\n","      <td>0.333333</td>\n","      <td>0.000000</td>\n","      <td>0.333333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01674df2-1627-4cfd-9fbd-990628006e6c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-01674df2-1627-4cfd-9fbd-990628006e6c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-01674df2-1627-4cfd-9fbd-990628006e6c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b7284a6b-e179-40fa-b132-a2b25e9f827a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b7284a6b-e179-40fa-b132-a2b25e9f827a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b7284a6b-e179-40fa-b132-a2b25e9f827a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 1266,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9953944677192492,\n        \"min\": -1.4678306008802045,\n        \"max\": 5.78258370912611,\n        \"num_unique_values\": 845,\n        \"samples\": [\n          -0.7265395728515273,\n          0.6384382412142862\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9967328461035582,\n        \"min\": -2.698006232283177,\n        \"max\": 2.983646422857264,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -0.7505715442867191,\n          1.3674735248541934\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9888760675083177,\n        \"min\": -1.817304455519308,\n        \"max\": 2.8393883949082386,\n        \"num_unique_values\": 944,\n        \"samples\": [\n          0.6008935801253992,\n          -1.5475712967186364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCVC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26243242701170366,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 493,\n        \"samples\": [\n          0.7506120000000001,\n          0.8186009999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26052732515524113,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          0.19284033333333334,\n          0.6020993333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SMOKE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9795719835422836,\n        \"min\": -1.6449050708254869,\n        \"max\": 1.6187585428550124,\n        \"num_unique_values\": 779,\n        \"samples\": [\n          1.3850720689564544,\n          -0.004701966816146966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FAF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2813105990640179,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 700,\n        \"samples\": [\n          0.4255173333333333,\n          0.19054933333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TUE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3021495824391178,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 695,\n        \"samples\": [\n          0.240107,\n          0.159504\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CALC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1715748616405652,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.3333333333333333,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# 하이퍼 opt\n","import time\n","import xgboost as xgb\n","import numpy as np\n","from hyperopt import fmin, tpe, hp, STATUS_OK, Trials\n","from sklearn.metrics import f1_score\n","from sklearn.model_selection import train_test_split\n","\n","# # 데이터 로드 및 전처리\n","\n","# # 하이퍼파라미터 최적화를 위한 목적 함수 정의\n","def objective(params):\n","    start_time = time.time()\n","\n","    # XGBoost 모델 정의\n","    xgb_model = xgb.XGBClassifier(\n","        objective='multi:softmax',\n","        num_class=6,\n","        eval_metric='merror',\n","        **params\n","    )\n","\n","    # 클래스 6을 클래스 0으로 변환\n","    y_train_fixed = np.where(y_train == 6, 0, y_train)\n","    y_test_fixed = np.where(y_test == 6, 0, y_test)\n","\n","    # 모델 학습\n","    xgb_model.fit(X_train, y_train_fixed)\n","\n","    # 검증 세트 예측\n","    y_pred = xgb_model.predict(X_test)\n","\n","    # F1 score 계산\n","    score = f1_score(y_test, y_pred, average='weighted')\n","\n","    end_time = time.time()\n","    training_time = end_time - start_time\n","\n","    return {'loss': -score, 'status': STATUS_OK, 'training_time': training_time}\n","\n","# 하이퍼파라미터 탐색 공간 정의\n","space = {\n","    'max_depth': hp.choice('max_depth', [3, 10]),\n","    'eta': hp.uniform('eta', 0.01, 0.5),\n","    'n_estimators': hp.choice('n_estimators', [50, 300]),\n","    'min_child_weight': hp.choice('min_child_weight', [1, 5]),\n","    'gamma': hp.uniform('gamma', 0, 0.2),\n","    'colsample_bytree': hp.uniform('colsample_bytree', 0.6, 1.0),\n","    'subsample': hp.uniform('subsample', 0.8, 1.0),\n","    #'alpha': hp.choice('alpha', [0, 0.1, 0.2]),  # L1 규제 강도\n","    #'lambda': hp.choice('lambda', [0, 0.1, 0.2]),  # L2 규제 강도\n","    'random_state':42\n","}\n","\n","# 하이퍼파라미터 최적화 수행\n","trials = Trials()\n","best = fmin(objective, space, algo=tpe.suggest, max_evals=50, trials=trials)\n","# 최적의 하이퍼파라미터 출력\n","print(\"최적의 하이퍼파라미터:\", best)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eRBXfW1ZpZ-L","executionInfo":{"status":"ok","timestamp":1709554194439,"user_tz":-540,"elapsed":29804,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"8070f4dd-70da-42ca-f349-e4b5c645d050"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["100%|██████████| 50/50 [00:29<00:00,  1.67trial/s, best loss: -0.7599617992399048]\n","최적의 하이퍼파라미터: {'colsample_bytree': 0.7585324406519633, 'eta': 0.18809406138234636, 'gamma': 0.024458036255462626, 'max_depth': 0, 'min_child_weight': 0, 'n_estimators': 1, 'subsample': 0.8864495379412279}\n"]}]},{"cell_type":"code","source":["import xgboost as xgb\n","from sklearn.metrics import classification_report\n","\n","# 최적의 하이퍼파라미터 설정\n","best_params = {\n","    'max_depth': [3, 10][best['max_depth']],\n","    'eta': best['eta'],\n","    'n_estimators': [50, 300][best['n_estimators']],\n","    'min_child_weight': [1, 5][best['min_child_weight']],\n","    'gamma': best['gamma'],\n","    'colsample_bytree': best['colsample_bytree'],\n","    'subsample': best['subsample'],\n","    'random_state': 42,\n","    'objective': 'multi:softmax',\n","    'num_class': 6,\n","    'eval_metric': 'merror'\n","}\n","\n","# XGBoost 모델 정의\n","xgb_model_best = xgb.XGBClassifier(**best_params)\n","\n","# 클래스 6을 클래스 0으로 변환\n","y_train_fixed = np.where(y_train == 6, 0, y_train)\n","y_test_fixed = np.where(y_test == 6, 0, y_test)\n","\n","# 최적의 하이퍼파라미터를 사용하여 모델 재학습\n","xgb_model_best.fit(X_train, y_train_fixed)\n","\n","# 테스트 데이터에 대해 예측 수행\n","y_pred = xgb_model_best.predict(X_test)\n","# 성능 평가\n","print(classification_report(y_test_fixed, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CP7BVAbrGiuh","executionInfo":{"status":"ok","timestamp":1709554201180,"user_tz":-540,"elapsed":2873,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"b773c3c4-90a5-4cd8-bffa-eb6fc2f45540"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.99      0.97      0.98       149\n","           1       0.90      0.97      0.93        72\n","           2       0.97      0.90      0.94        73\n","           3       0.96      0.93      0.94        72\n","           4       0.93      1.00      0.96        88\n","           5       1.00      0.96      0.98        74\n","\n","    accuracy                           0.96       528\n","   macro avg       0.96      0.96      0.96       528\n","weighted avg       0.96      0.96      0.96       528\n","\n"]}]},{"cell_type":"code","source":["# import time\n","\n","# start_time = time.time()\n","# y_train_fixed = np.where(y_train == 6, 0, y_train)\n","# y_test_fixed = np.where(y_test == 6, 0, y_test)\n","\n","# # XGBoost 모델에 필요한 형식으로 데이터 변환\n","# dtrain = xgb.DMatrix(data=X_train, label=y_train_fixed)\n","# dtest = xgb.DMatrix(data=X_test, label=y_test_fixed)\n","\n","# # xgboost 파라미터 지정\n","# params = {\n","#     'max_depth': 1,\n","#     'eta': 0.2,\n","#     'objective': 'multi:softmax',\n","#     'num_class': 6,\n","#     'eval_metric': 'merror',\n","#     'num_boost_round': 0,  # 수정된 부분\n","#     'min_child_weight': 0,\n","#     'gamma': 0.2,\n","#     'colsample_bytree': 0.9,\n","#     'subsample': 0.9,\n","#     'alpha':1,\n","#     'lambda':1,\n","#     'random_state': 42\n","# }\n","\n","# eval_list = [(dtrain, 'train'), (dtest, 'eval')]\n","\n","# # 모델 훈련\n","# xgb_model = xgb.train(\n","#     params=params,\n","#     dtrain=dtrain,\n","#     evals=eval_list,\n","#     early_stopping_rounds=200\n","# )\n","\n","# # 검증 세트 예측\n","# y_pred = xgb_model.predict(dtest)\n","\n","# # F1 score 계산\n","# f1 = f1_score(y_test, y_pred, average='weighted')\n","# print(\"Weighted F1 score:\", f1)\n","\n","# end_time = time.time()\n","\n","# # 학습 소요 시간 계산\n","# training_time = end_time - start_time\n","# print(\"Training time:\", training_time, \"seconds\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mHyVKOF5qCJK","executionInfo":{"status":"ok","timestamp":1709515531856,"user_tz":-540,"elapsed":558,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"3b3eba57-c4b2-4c0a-a157-4ae0841c4f18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\ttrain-merror:0.61295\teval-merror:0.62311\n","[1]\ttrain-merror:0.60664\teval-merror:0.61553\n","[2]\ttrain-merror:0.59637\teval-merror:0.60985\n","[3]\ttrain-merror:0.60032\teval-merror:0.60795\n","[4]\ttrain-merror:0.60348\teval-merror:0.61932\n","[5]\ttrain-merror:0.58057\teval-merror:0.58902\n","[6]\ttrain-merror:0.57741\teval-merror:0.58333\n","[7]\ttrain-merror:0.57504\teval-merror:0.58523\n","[8]\ttrain-merror:0.57425\teval-merror:0.58333\n","[9]\ttrain-merror:0.56951\teval-merror:0.57765\n","Weighted F1 score: 0.2057702678671643\n","Training time: 0.24887490272521973 seconds\n"]}]},{"cell_type":"code","source":["# 처음 10개 샘플에 대한 예측값을 출력(소수점 셋째)\n","pred_props = xgb_model_best.predict(X_test)\n","print(np.round(pred_props[:10], 3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5VBugCh4qYwE","executionInfo":{"status":"ok","timestamp":1709554210922,"user_tz":-540,"elapsed":315,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"f847dffb-6903-4d9e-b204-960a7814a2ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5 1 5 4 5 2 2 1 2 4]\n"]}]},{"cell_type":"code","source":["# 오차행렬\n","from sklearn.metrics import confusion_matrix\n","\n","y_matrix = confusion_matrix(y_test, pred_props)\n","print(\"오차 행렬 : \\n{}\".format(y_matrix))\n","\n","# 종속이 다중분류라 average를 'macro'를 부여\n","# https://data-minggeul.tistory.com/11 참고\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n","\n","accuracy = accuracy_score(pred_props, y_test)\n","precision = precision_score(pred_props, y_test, average='weighted')\n","recall = recall_score(pred_props, y_test, average='weighted')\n","f1 = f1_score(pred_props, y_test, average='weighted')\n","\n","print(\"정확도 : {}\".format(accuracy))\n","print(\"정밀도 : {}\".format(precision))\n","print(\"재현율 : {}\".format(recall))\n","print(\"F1 : {}\".format(f1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7D_-Kb4Vqbrw","executionInfo":{"status":"ok","timestamp":1709554213608,"user_tz":-540,"elapsed":510,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"44d78262-37a2-4765-fe7b-8b79525de992"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["오차 행렬 : \n","[[64  4  0  0  0  0  0]\n"," [ 1 70  1  0  0  0  0]\n"," [ 0  4 66  3  0  0  0]\n"," [ 0  0  1 67  4  0  0]\n"," [ 0  0  0  0 88  0  0]\n"," [ 0  0  0  0  3 71  0]\n"," [81  0  0  0  0  0  0]]\n","정확도 : 0.8068181818181818\n","정밀도 : 0.9526232208418952\n","재현율 : 0.8068181818181818\n","F1 : 0.8536745643964588\n"]}]},{"cell_type":"code","source":["# 훈련세트에 대한 예측 수행\n","pred_train = xgb_model_best.predict(X_train)\n","\n","print(\"훈련 세트 예측 결과:\")\n","print(\"훈련 세트 정확도:\", accuracy_score(pred_train, y_train))\n","print(\"훈련 세트 정밀도:\", precision_score(pred_train, y_train, average='weighted'))\n","print(\"훈련 세트 재현율:\", recall_score(pred_train, y_train, average='weighted'))\n","print(\"훈련 세트 F1:\", f1_score(pred_train, y_train, average='weighted'))\n","# 테스트세트에 대한 예측 수행\n","print(\"\\n테스트 세트 예측 결과:\")\n","print(\"테스트 세트 정확도:\", accuracy_score(pred_props, y_test))\n","print(\"테스트 세트 정밀도:\", precision_score(pred_props, y_test, average='weighted'))\n","print(\"테스트 세트 재현율:\", recall_score(pred_props, y_test, average='weighted'))\n","print(\"테스트 세트 F1:\", f1_score(pred_props, y_test, average='weighted'))\n","\n","# 헐... 그리드 서치만 알려준 이유가 있는건가...내가 뭐 잘못했어어어어ㅓ어어어ㅓ어ㅓㅓㅓㅓ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QPMbzMzrqdx5","executionInfo":{"status":"ok","timestamp":1709554216548,"user_tz":-540,"elapsed":3,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"e24d4cce-cf3f-475d-e87d-4732707aa9dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 세트 예측 결과:\n","훈련 세트 정확도: 0.8475513428120063\n","훈련 세트 정밀도: 1.0\n","훈련 세트 재현율: 0.8475513428120063\n","훈련 세트 F1: 0.8950986822858444\n","\n","테스트 세트 예측 결과:\n","테스트 세트 정확도: 0.8068181818181818\n","테스트 세트 정밀도: 0.9526232208418952\n","테스트 세트 재현율: 0.8068181818181818\n","테스트 세트 F1: 0.8536745643964588\n"]}]},{"cell_type":"code","source":["# feature importance\n","\n","from xgboost import plot_importance\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","fig, ax = plt.subplots(figsize=(10, 12))\n","plot_importance(xgb_model_best, ax=ax)\n","# 키 몸무게 나이 빼고 봐야할 것 같음.ㅇㅇ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vzax5MX2qgAp","executionInfo":{"status":"ok","timestamp":1709554222635,"user_tz":-540,"elapsed":1480,"user":{"displayName":"최수민","userId":"09574653049761404940"}},"outputId":"59ee5413-a3cd-4081-e2cc-9e1b9b7b82dc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: title={'center': 'Feature importance'}, xlabel='F score', ylabel='Features'>"]},"metadata":{},"execution_count":35},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1200 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"pFKrmNesqiwF"},"execution_count":null,"outputs":[]}]}